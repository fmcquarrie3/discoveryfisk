{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Initial Exploration\n",
    "**Date:** September 12, 2018  \n",
    "**Author:** Francie McQuarrie\n",
    "\n",
    "## Note:\n",
    "This is just an intial exploration notebook for my work as I figure out how to scrape data from Medium.  \n",
    "Once I get the process figured out I will transfer the relevent code to a clean, finalized notebook.   \n",
    "I will probably comment this code for my own sanity, but it won't be as nice as the final version. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary packages\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ToDo before 9/18/18\n",
    "* Scrape website data from Medium (those tagged “codingbootcamp(s)” or “coding bootcamp(s)”)\n",
    "\n",
    "  * Use Python and Jupyter notebooks, CSV output as text file\n",
    "\n",
    "  * Share work through Google Drive (eventually on Github) -- make sure code is well-documented!\n",
    "\n",
    "  * Check out Medium API\n",
    "\n",
    "  * Get count of those with the correct tag\n",
    " \n",
    "  * Include author name, author description, date, title, text\n",
    "\n",
    "    * Optional: subtitle after title"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9/13/18 Thoughts\n",
    "* I tried to do a search through the tags for coding bootcamp\n",
    "* But you can search for tags that don't have any stories attached to them. \n",
    "  * `codingbootcamp` as a _tag_ returns no stories\n",
    "  * `Codingbootcamp` as a _tag_ returns no stories\n",
    "  * `coding bootcamp` as a _tag_ returns no stories\n",
    "  * `coding bootcamp(s)` isn't even a tag - says \"We couldn't find any tags\"\n",
    "  * `codingbootcamp(s)` isn't even a tag - says \"We couldn't find any tags\"\n",
    "* Some of these terms didn't have a specific tag, but when you click the \"story\" tab of the search bar with this term some articles pop up - I think the term is either in the title or in the text of the story. \n",
    "  * `coding bootcamp` returns a lot of associated stories, but they are not tagged with that term - just in the title\n",
    "  \n",
    "Based on this, I decided that I am going to see if I can scrape just one story info's first, using a tutorial I found, before attempting to scrape a bunch at once. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scrape One Article's Information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**The article:** https://medium.freecodecamp.org/5-key-learnings-from-the-post-bootcamp-job-search-9a07468d2331  \n",
    "\n",
    "**The tutorial:** https://realpython.com/python-web-scraping-practical-introduction/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import packages\n",
    "from requests import get\n",
    "from requests.exceptions import RequestException\n",
    "from contextlib import closing\n",
    "from bs4 import BeautifulSoup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define url variable for story we are trying to scrape\n",
    "test_url = \"https://medium.freecodecamp.org/5-key-learnings-from-the-post-bootcamp-job-search-9a07468d2331\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define get function to get HTML\n",
    "# Source: https://realpython.com/python-web-scraping-practical-introduction/ (not written by Me)\n",
    "def simple_get(url):\n",
    "    \"\"\"\n",
    "    Attempts to get the content at `url` by making an HTTP GET request.\n",
    "    If the content-type of response is some kind of HTML/XML, return the\n",
    "    text content, otherwise return None.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        with closing(get(url, stream=True)) as resp: #closing ensures any network resources are freed when out of scope - good practice\n",
    "            return resp\n",
    "            #if is_good_response(resp):\n",
    "                #return resp.content\n",
    "            #else:\n",
    "                #return None\n",
    "\n",
    "    except RequestException as e:\n",
    "        log_error('Error during requests to {0} : {1}'.format(url, str(e)))\n",
    "        return None\n",
    "\n",
    "\n",
    "def is_good_response(resp):\n",
    "    \"\"\"\n",
    "    Returns True if the response seems to be HTML, False otherwise.\n",
    "    \"\"\"\n",
    "    content_type = resp.headers['Content-Type'].lower()\n",
    "    return (resp.status_code == 200 \n",
    "            and content_type is not None \n",
    "            and content_type.find('html') > -1)\n",
    "\n",
    "\n",
    "def log_error(e):\n",
    "    \"\"\"\n",
    "    It is always a good idea to log errors. \n",
    "    This function just prints them, but you can\n",
    "    make it do anything.\n",
    "    \"\"\"\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<Response [302]>, <Response [302]>]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_url_1 = \"https://medium.freecodecamp.org/5-key-learnings-from-the-post-bootcamp-job-search-9a07468d2331\"\n",
    "a = simple_get(test_url_1)\n",
    "a.history[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Test function to make sure it returns None if url is bad\n",
    "no_html = simple_get('https://hello.com/nothing-here')\n",
    "no_html is None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "150544"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Test getting raw html from our article\n",
    "raw_html = simple_get(test_url)\n",
    "len(raw_html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ok now we know we have a working function to get the raw html of a url.  \n",
    "The next difficult part is to parse the raw html into the components that we are interested in.  \n",
    "Before we can parse, we have to search through the source code of the page (using Chrome's `Settings->Tools->Developer Tools` function to inspect) to figure out what are the html tags/markers that designate the parts of the raw html we are interested in. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see if we can figure out how to extract the author's name from the url.  \n",
    "I see a couple of html tags that can possible designate the authors name so I will do a little exploration to see which tag returns the best/most reliable result. Once I find the right tag, I will put it into a function later."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Interesting finding**: After a quick glance, it seems like a lot of information we might want was nested inside html `<meta>` tags. Idk what that is, but some googling tells me that \n",
    "\n",
    "> The <meta> tag provides metadata about the HTML document. Metadata will not be displayed on the page, but will be machine parsable.\n",
    "> Meta elements are typically used to specify page description, keywords, author of the document, last modified, and other metadata.\n",
    "\n",
    "This seems to be exactly what we want, so I will play around with extracting this info. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Felix Feng'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What happens if I parse on the meta author tag\n",
    "parsed_html = BeautifulSoup(raw_html, 'html.parser') #from tutorial\n",
    "# source for next line: https://stackoverflow.com/questions/36768068/get-meta-tag-content-property-with-beautifulsoup-and-python\n",
    "author = parsed_html.find('meta', property=\"author\")['content'] \n",
    "author"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Thoughts**: If most of the information we are intersted in is in a meta tag, then parsing it will be super easy using BeautifulSoup.   \n",
    "Gonna try and get the next elements from the meta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n",
      "<meta content=\"width=device-width, initial-scale=1.0, viewport-fit=contain\" name=\"viewport\"/>\n",
      "<meta content=\"I spent 3 months applying to jobs after a coding bootcamp. Here’s what I learned.\" name=\"title\"/>\n",
      "<meta content=\"unsafe-url\" name=\"referrer\"/>\n",
      "<meta content=\"A less-talked about part of the bootcamper’s journey is what happens after you graduate — when you’re searching for that six-figure developer position. I completed Hack Reactor in July 2016 and took…\" name=\"description\"/>\n",
      "<meta content=\"#000000\" name=\"theme-color\"/>\n",
      "<meta content=\"I spent 3 months applying to jobs after a coding bootcamp. Here’s what I learned.\" property=\"og:title\"/>\n",
      "<meta content=\"I spent 3 months applying to jobs after a coding bootcamp. Here’s what I learned.\" property=\"twitter:title\"/>\n",
      "<meta content=\"https://medium.freecodecamp.org/5-key-learnings-from-the-post-bootcamp-job-search-9a07468d2331\" property=\"og:url\"/>\n",
      "<meta content=\"https://cdn-images-1.medium.com/max/1200/1*tMOJBSqKfYd9M2zOskluFw.png\" property=\"og:image\"/>\n",
      "<meta content=\"542599432471018\" property=\"fb:app_id\"/>\n",
      "<meta content=\"A less-talked about part of the bootcamper’s journey is what happens after you graduate — when you’re searching for that six-figure…\" property=\"og:description\"/>\n",
      "<meta content=\"A less-talked about part of the bootcamper’s journey is what happens after you graduate — when you’re searching for that six-figure…\" name=\"twitter:description\"/>\n",
      "<meta content=\"https://cdn-images-1.medium.com/max/1200/1*tMOJBSqKfYd9M2zOskluFw.png\" name=\"twitter:image:src\"/>\n",
      "<meta content=\"Felix Feng\" property=\"author\"/>\n",
      "<meta content=\"article\" property=\"og:type\"/>\n",
      "<meta content=\"summary_large_image\" name=\"twitter:card\"/>\n",
      "<meta content=\"https://www.facebook.com/freecodecamp\" property=\"article:publisher\"/>\n",
      "<meta content=\"1038750720\" property=\"article:author\"/>\n",
      "<meta content=\"index, follow\" name=\"robots\"/>\n",
      "<meta content=\"2016-11-19T16:48:30.365Z\" property=\"article:published_time\"/>\n",
      "<meta content=\"@freecodecamp\" name=\"twitter:site\"/>\n",
      "<meta content=\"freeCodeCamp.org\" property=\"og:site_name\"/>\n",
      "<meta name=\"twitter:label1\" value=\"Reading time\"/>\n",
      "<meta name=\"twitter:data1\" value=\"6 min read\"/>\n",
      "<meta content=\"Medium\" name=\"twitter:app:name:iphone\"/>\n",
      "<meta content=\"828256236\" name=\"twitter:app:id:iphone\"/>\n",
      "<meta content=\"medium://p/9a07468d2331\" name=\"twitter:app:url:iphone\"/>\n",
      "<meta content=\"Medium\" property=\"al:ios:app_name\"/>\n",
      "<meta content=\"828256236\" property=\"al:ios:app_store_id\"/>\n",
      "<meta content=\"com.medium.reader\" property=\"al:android:package\"/>\n",
      "<meta content=\"Medium\" property=\"al:android:app_name\"/>\n",
      "<meta content=\"medium://p/9a07468d2331\" property=\"al:ios:url\"/>\n",
      "<meta content=\"medium://p/9a07468d2331\" property=\"al:android:url\"/>\n",
      "<meta content=\"https://medium.freecodecamp.org/5-key-learnings-from-the-post-bootcamp-job-search-9a07468d2331\" property=\"al:web:url\"/>\n",
      "<meta content=\"https://medium.freecodecamp.org/5-key-learnings-from-the-post-bootcamp-job-search-9a07468d2331\" name=\"parsely-link\"/>\n"
     ]
    }
   ],
   "source": [
    "# Print out all meta tags so I can reference for stuff later (using parsed_html defined above)\n",
    "for m in parsed_html.select('meta'):\n",
    "    print(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'I spent 3 months applying to jobs after a coding bootcamp. Here’s what I learned.'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get article title\n",
    "title = parsed_html.find('meta', property='og:title')['content']\n",
    "title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2016-11-19T16:48:30.365Z'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get the article publish date\n",
    "publish_date = parsed_html.find('meta', property='article:published_time')['content']\n",
    "publish_date"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**ToDo:** Hmm will need to figure out how to clean up dates later idk what some of those symbols are...\n",
    "Lets see if that is only for this article or for another.  \n",
    "Another article: https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2015-06-29T20:54:07.674Z'"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "another_raw_html = simple_get('https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe')\n",
    "another_parsed_html = BeautifulSoup(another_raw_html, 'html.parser')\n",
    "another_publish_date = another_parsed_html.find('meta', property='article:published_time')['content']\n",
    "another_publish_date"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ok so all dates are formatted weirdly "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'A less-talked about part of the bootcamper’s journey is what happens after you graduate — when you’re searching for that six-figure developer position. I completed Hack Reactor in July 2016 and took…'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What is the 'description' property? Is it the article text?\n",
    "# source: https://gist.github.com/krmaxwell/3756577\n",
    "description = parsed_html.find_all('meta', attrs={'name': 'description'})[0]['content'] #find_all returns a list but I just want first one\n",
    "description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "199"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# is anything not displaying or is it really that short?\n",
    "len(description)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ok it seems like the author didn't set the description of the page and it just took the default first sentence or two. So i will have to find a different tag to get the text of the article. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Founder of {Set}. Investor @TuringCap. Previously @Radius & @21.co. B.S. @UCBerkeley'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Got this from the BeautifulSoup documentation - if you want to search for a specifc class name use class_\n",
    "# The \"ui-caption..\" is the div class for the author's bio/description, found through inspecting the web page source code.\n",
    "# find_all returns a list so I extract the only element out with [0], and get the content of the div tag with .text\n",
    "author_bio = parsed_html.find_all('div', class_=\"ui-caption ui-xs-clamp2 postMetaInline\")[0].text\n",
    "author_bio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Currently**:\n",
    "I have been able to parse the \n",
    "* author name\n",
    "* author bio/description\n",
    "* publish date of article (in weird format)\n",
    "**Need:**\n",
    "* Article full text\n",
    "* Subtitle - see *note1*  \n",
    "\n",
    "*Note1*:\n",
    "Parsing the subtitle might be a bit tricky, because not all articles have a subtitle, so its encoded weirdly. \n",
    "For example, this article: https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe has a subtitle *\"9 out of 10 programs are outright scams\"*, and this subtitle is encoded in the `<meta property=\"og:description\">` tag.  \n",
    "But our original test article doesn't have a subtitle, so its `<meta property=\"og:description\">` is just the first sentence of the article.  \n",
    "So one possible way is to extract this tag, and then do some cleaning where we write a function that checks whether the text pulled from this tag is the same as the first bit of the article text (not a subtitle/false) or different (is a subtitle/true). But that would be an extra step to compiling the final dataset. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next let's see if we can extract out the article text. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"I spent 3 months applying to jobs after a coding bootcamp. Here’s what I\\xa0learned.A less-talked about part of the bootcamper’s journey is what happens after you graduate\\u200a—\\u200awhen you’re searching for that six-figure developer position.< 3% of applications became\\xa0offersI completed Hack Reactor in July 2016 and took almost 3 months before accepting an offer with Radius Intelligence. I applied to 291 companies, did 32 phone screens, 16 technical screens, 13 coding challenges, 11 on-sites, and received 8 offers. The offers ranged from $60-125k in salary from companies all over the US, and for both front end and full stack roles. In total, 2.8% of applications became offers.Here are 5 things I wish I’d known before I began my job search.Insight #1: Get through to real\\xa0peopleAt first, I applied for companies using the shotgun approach. I applied through Indeed.com, AngelList, LinkedIn, StackOverflow, Hacker News, company websites, and even Craigslist.I’d submit a resume for any role that wanted React, Node, or JavaScript experience. In the first week, I applied to 15–20 companies a day.Pro-Tip: Find companies using this easy-application repo.My yield was low. Less than five percent of companies responded to me. I was throwing applications into a black hole.Everything changed when one of my cohort-mates, a former recruiter, shared a guide to the job search. He told us to send emails directly to real people with each application. It could be anybody. As long as someone read it.From then on, whenever I submitted an application, I searched for the company on LinkedIn and emailed someone on their engineering or hiring team.For most small companies or C-level executives, the email format is usually firstName@dreamCompany.com. For larger companies, it may be firstName.lastName@dreamCompany.com.To verify emails, I used Rapportive to cross-check emails with social media accounts.The results were amazing. With 150+ emails sent, my response rate was a whopping 22%.It also felt great to hear from real people. Surprisingly, CEOs and CTOs responded to me. Sometimes they even interviewed me themselves.Takeaway: If you’re applying through the front door, make sure you’re getting to human\\xa0beings.Insight #2: Start small and work your way\\xa0upYou will face Level 1 interviews (a non-tech company that needs any dev), where interviewers ask you nothing more than JavaScript trivia.You will face Level 9 interviews (Google/Facebook level), where interviewers ask difficult data structure and algorithm questions.I strategically set up my process so that I had lower-level interviews earlier, and higher-level interviews later on.Early on, I gained experience, built confidence, and secured offers from companies that had less intensive interviews.As I got more experience, I effectively “leveled up.” I became capable of completing interviews at companies with higher hiring bars. This is illustrated below as a linear correlation between the number of weeks I was into the process and the base salary I was offered.There’s a direct correlation between time spent interviewing and offer\\xa0salary.I unlocked tougher questions. I unlocked higher salaries. And eventually, I unlocked the job I took.Takeaway: Plan to tackle easier interviews early on and more difficult ones later\\xa0on.Insight #3: Study like your future job depends on it (because it\\xa0does)I hate to break it to you, but the most important thing you could be doing at any point is studying and preparing.Why? Because you won’t get the offer if you don’t have good answers to the questions they ask you.People won’t refer you if they don’t think you’re prepared for their interviews.Coming out of Hack Reactor, my weaknesses were data structures and algorithms. A study by Triplebyte has found that bootcamp grads are weaker in these areas than computer science grads.So I learned and practiced. Every day.I devoted entire days to learning sorting algorithms. Other days, I focused on understanding how the internet worked.If I didn’t fully understand a concept, I’d spend the day watching YouTube videos or searching StackOverflow until I did.I found the following study materials useful:InterviewCake: My favorite resource for data structures and algorithms. It breaks down solutions into step-by-step chunks\\u200a—\\u200aa great alternative to Cracking the Code Interview (CTCI). My only gripe is that they don’t have more problems!HiredInTech’s System Design Section: A great guide for system design interview questions.Coderust: If you’re avoiding CTCI like the plague, Coderust 2.0 may be perfect for you. For $49, you get solutions in almost any programming language, with interactive diagrams.Reddit’s How to Prepare for Tech Interviews: I constantly used this as a benchmark for how prepared I was.Front End Interview Questions: An exhaustive list of front-end questions.Leetcode: The go-to resource for algorithm and data structure questions. You can filter by company, so for example, you could get all the questions that Uber or Google typically ask.Takeaway: There’s no such thing as too much preparation.Insight #4: Put your best foot\\xa0forwardBreaking into the industry is hard. You have to perform well, even when you’re not fully prepared. In order to succeed, you have to be your own advocate.Sell YourselfAt Hack Reactor, we’re trained to mask our inexperience. In our personal narratives, we purposely omit our bootcamp education.Why? Otherwise, companies automatically categorize us into junior developer roles or tag us as “not enough experience.”In one interview with a startup, the interview immediately went south once they realized I’d done a bootcamp. One company used it against me and made me a $60k offer, benchmarking against junior developers.Ultimately, you need to convince companies that you can do the job.At the same time, you need to convince yourself that you can do the job.You can. Focus on your love for programming. Focus on what you’ve built with React and Node. Focus on demonstrating your deep knowledge in JavaScript and any other languages you’ve learned.Only then can they justify giving you the job.It’s a Two-way ConversationInterviewing is a mutual exploration of fit between an employee and an employer. While it’s your job to convince employers to hire you, it’s also their job to win you over.Don’t be ashamed of using the interview as an opportunity to evaluate the job opportunity.I talked to any company, even if I had only the slightest interest.I did on-sites all over the country with any company that invited me out. I asked questions, and sucked up knowledge on engineering team organization, technologies and tools used, company challenges, and system architecture.Pro-Tip: During interviews, ask the following questions:What are some technical challenges you’ve recently faced?What do you enjoy about working at X company?How are teams structured and how are tasks usually divided?I treated every interaction as a learning opportunity. Each interaction helped me improve my presentation, interview, and technical skills. Each failure helped me find my blind spots.Takeaway: Don’t sell yourself short! And remember, it’s a mutual exploration.Insight #5: It’s a marathon, not a\\xa0sprintThe journey is by no means easy. For 3 months, I grinded 6 days a week. But I tried to take care of myself.What a typical day could look like in JavaScriptSome days, I’d study with friends. Other days, I’d go find a cafe and study alone, or hang out at Hack Reactor’s alumni lounge. And every week I’d check in with our career counselor to talk about my progress.It’s easy to burn out during the process. Eat well, sleep, and exercise.It can get lonely. Spend time with friends who are going through the same experience.Takeaway: Prepare for the long game and make sure you take care of yourself.In summary, the key takeaways are:Get through to real peopleStart small and work your way upStudy like your future job depends on itPut your best foot forwardIt’s a marathon, not a sprintThe process may seem endless, but you’re going to make it. Keep putting in the hours. Keep sending in the applications. Keep taking caring of yourself. All of it pays off in the end.A special thanks to Dylan Tran, Karen Zhao, Rohit 'Sunny' Rekhi, Jake Pace, Anamita Guha, Stephanie Liu, and many others.Please share this with friends going through the job search. If you like what you read, hit that ❤ button below.\""
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find_all returns a list but only one element\n",
    "# use .text to get the text \n",
    "article_text = parsed_html.find_all('div', class_='postArticle-content')[0].text \n",
    "article_text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ok wow that was easier than I thought... but there a few problems with this that could complicate text analysis later on.  \n",
    "1. Notice that there are a lot of `\\xa0` interspersed in the text - formatting remnants? But they appear in different spots in the article - titles, numbered lists, graphic captions, so I am not sure how you would be able to prevent them.\n",
    "    * you could call a `article_text.replace('\\xa0', ' ')` because that would get rid of them - and since they mostly occur in between words, replaceing it will prserve structure\n",
    "2. Some spaces and puncutation are missing. \n",
    "    * like, *\"Sell YourselfAt Hack Reactor\"*\n",
    "    * I think this is the result of header formatting bc \"Sell Yourself\" is a formatted section header and \"At Hack..\" is the beginning of the section text. \n",
    "    * One possible way to fix this would be somehow to get a unformatted/raw text version of the website and extract the article text from that, but I already did a little digging and there doesn't seem to be an easy way/package to do this, else I would have found it already."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Getter Functions - OUT OF DATE SCROLL DOWN FOR REDEFINITION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_author(parsed_html):\n",
    "    \"\"\"Parses the author name from a Medium article. \n",
    "    Arguments:\n",
    "        parsed_html: object returned by calling `BeautifulSoup(raw_html, 'html.parser')`\n",
    "    Returns: \n",
    "        the author name as a string.\n",
    "    \"\"\"\n",
    "    author = parsed_html.find('meta', property=\"author\")\n",
    "    return author['content'] if author else None\n",
    "\n",
    "def get_author_bio(parsed_html):\n",
    "    \"\"\"Parses the author's bio/description from a Medium article. \n",
    "    Arguments:\n",
    "        parsed_html: object returned by calling `BeautifulSoup(raw_html, 'html.parser')`\n",
    "    Returns: \n",
    "        the author bio/description as a string if it exists, and None otherwise\n",
    "    \"\"\"\n",
    "    bios = parsed_html.find_all('div', class_=\"ui-caption ui-xs-clamp2 postMetaInline\")\n",
    "    # If bios is empty, that means there is no author bio for article, and the [0]  will error so we need to explicityly\n",
    "    # check and return None if no author bio\n",
    "    return bios[0].text if bios else None\n",
    "\n",
    "def get_title(parsed_html):\n",
    "    \"\"\"Parses the title of a Medium article.\n",
    "    Arguments:\n",
    "        parsed_html: object returned by calling `BeautifulSoup(raw_html, 'html.parser')`\n",
    "    Returns: \n",
    "        the title of the article as a string.\n",
    "    \"\"\"\n",
    "    title = parsed_html.find('meta', property='og:title')\n",
    "    return title['content'] if title else None\n",
    "\n",
    "def get_raw_publish_date(parsed_html):\n",
    "    \"\"\"Parses the date a Medium article was published. \n",
    "    Arguments:\n",
    "        parsed_html: object returned by calling `BeautifulSoup(raw_html, 'html.parser')`\n",
    "    Returns: \n",
    "        a raw/uncleaned publish date, which looks like '2016-11-19T16:48:30.365Z'\n",
    "    \"\"\"\n",
    "    date = parsed_html.find('meta', property='article:published_time')\n",
    "    return date['content'] if date else None\n",
    "\n",
    "def get_article_publisher(parsed_html):\n",
    "    \"\"\"Parses the article's publisher from a Medium article. \n",
    "    Arguments:\n",
    "        parsed_html: object returned by calling `BeautifulSoup(raw_html, 'html.parser')`\n",
    "    Notes:\n",
    "        The publisher is encoded as \"https://facebook.com/publisher\" so I extract just the publisher name.\n",
    "        Not all articles have a verified publisher - like if it's just the author's personal blog - so publisher is\n",
    "        just \"medium\" in that case\n",
    "    Returns:\n",
    "        If article is hosted on verified publisher, returns publisher name as string\n",
    "        If article is on personal blog, returns \"medium\" as a string. \n",
    "        \n",
    "    \"\"\"\n",
    "    long_publisher = parsed_html.find(\"meta\", property='article:publisher')\n",
    "    return long_publisher['content'].split(\"/\")[3] if long_publisher else None\n",
    "\n",
    "def get_raw_article_text(parsed_html):\n",
    "    \"\"\"Extracts out the text/content of the Medium article.\n",
    "    Arguments:\n",
    "        parsed_html: object returned by calling `BeautifulSoup(raw_html, 'html.parser')`\n",
    "    Returns:\n",
    "        a raw/uncleaned string of text. Its raw because there are some weird characters that are remants\n",
    "        of header formatting and the like.\n",
    "    \"\"\"\n",
    "    text = parsed_html.find_all('div', class_='postArticle-content')\n",
    "    return text[0].text if text else None\n",
    "\n",
    "def get_all_article_info(article_url):\n",
    "    \"\"\"Parses a Medium article to get all needed information about author and story.\n",
    "    Arguments:\n",
    "        article_url: String of url for article to parse\n",
    "    Returns:\n",
    "        list of [author, author_bio, title, date, publisher article_text], where each component is a string\n",
    "    \"\"\"\n",
    "    raw_html = simple_get(article_url)\n",
    "    parsed_html = BeautifulSoup(raw_html, 'html.parser')\n",
    "    author = get_author(parsed_html)\n",
    "    author_bio = get_author_bio(parsed_html)\n",
    "    title = get_title(parsed_html)\n",
    "    date = get_raw_publish_date(parsed_html)\n",
    "    publisher = get_article_publisher(parsed_html)\n",
    "    text = get_raw_article_text(parsed_html)\n",
    "    return [author, author_bio, title, date,publisher, text]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Next Step: Parsing a List of Articles"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that I figured out how to parse information about a single article, I want to see if I can get information from a list of articles - like parsing the page you get when you searcg for a certain term.   \n",
    "Since it seemed like no stories were assoicated with the \"coding bootcamp\" tag, I am instead going to try and parse the \"Stories\" tab of the search, which seem to have \"coding bootcamp\" in the title. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Idea Outline**:  \n",
    "Given a url to a page that lists a bunch of articles, I want to find all the links to other stories on the page, and call my `get_all_article_info` function on the story links, and put all of that into a dataframe (at this point it will be too many things to put into a readable list).   \n",
    "_Side note:_ Medium doesn't have a \"next page\" for article lists, only continuous scrolling. I am worried about overloading this notebook or my computer's memory so I think I will stop after ten links. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I will be parsing this webpage: https://medium.com/search?q=coding%20bootcamps  \n",
    "It contains a list of posts and links to them. \n",
    "I want to figure out which html tag \"indicates/marks\" the links to post, so I can call my `get_all_article_info` on them.   \n",
    "I think the html that signifies what I want is of the form `<a href=\"link\" data-action:\"open-post\" data-action-source:\"search_post---------0\" data-action-value:\"link\" data-action-index=\"0\" data_post_id=\"abc123\">` . \n",
    "I think I can find these quickly but I have to figure out how to extract the relevant links from them.   \n",
    "That quick extraction will be the topic of the next cell. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "bootcamp_list_raw_html = simple_get(\"https://medium.com/search?q=coding%20bootcamps\")\n",
    "bootcamp_list_parsed_html = BeautifulSoup(bootcamp_list_raw_html, 'html.parser')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0\n",
      "https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0\n",
      "https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0\n",
      "https://medium.freecodecamp.org/code-briefing-yes-there-are-completely-free-coding-bootcamps-dcfebc05d530?source=search_post---------1\n",
      "https://medium.freecodecamp.org/code-briefing-yes-there-are-completely-free-coding-bootcamps-dcfebc05d530?source=search_post---------1\n",
      "https://medium.freecodecamp.org/code-briefing-yes-there-are-completely-free-coding-bootcamps-dcfebc05d530?source=search_post---------1\n",
      "https://medium.com/@choxi/lies-damned-lies-and-statistics-coding-bootcamps-and-the-authenticity-of-placement-rates-582880fea984?source=search_post---------2\n",
      "https://medium.com/@choxi/lies-damned-lies-and-statistics-coding-bootcamps-and-the-authenticity-of-placement-rates-582880fea984?source=search_post---------2\n",
      "https://medium.com/@choxi/lies-damned-lies-and-statistics-coding-bootcamps-and-the-authenticity-of-placement-rates-582880fea984?source=search_post---------2\n",
      "https://educationfuturism.com/coding-bootcamps-and-the-new-for-profit-higher-ed-dbcd463e89ec?source=search_post---------3\n",
      "https://educationfuturism.com/coding-bootcamps-and-the-new-for-profit-higher-ed-dbcd463e89ec?source=search_post---------3\n",
      "https://educationfuturism.com/coding-bootcamps-and-the-new-for-profit-higher-ed-dbcd463e89ec?source=search_post---------3\n",
      "https://medium.com/@devbootcamp/coding-bootcamps-2015-year-in-review-and-2016-predictions-8f278e711542?source=search_post---------4\n",
      "https://medium.com/@devbootcamp/coding-bootcamps-2015-year-in-review-and-2016-predictions-8f278e711542?source=search_post---------4\n",
      "https://medium.com/@devbootcamp/coding-bootcamps-2015-year-in-review-and-2016-predictions-8f278e711542?source=search_post---------4\n",
      "https://code.likeagirl.io/are-coding-bootcamps-worth-it-eff5112b8ec8?source=search_post---------5\n",
      "https://code.likeagirl.io/are-coding-bootcamps-worth-it-eff5112b8ec8?source=search_post---------5\n",
      "https://code.likeagirl.io/are-coding-bootcamps-worth-it-eff5112b8ec8?source=search_post---------5\n",
      "https://medium.com/@kenmazaika/23-things-aspiring-developers-should-know-about-online-coding-bootcamps-83d90b99abea?source=search_post---------6\n",
      "https://medium.com/@kenmazaika/23-things-aspiring-developers-should-know-about-online-coding-bootcamps-83d90b99abea?source=search_post---------6\n",
      "https://medium.com/@kenmazaika/23-things-aspiring-developers-should-know-about-online-coding-bootcamps-83d90b99abea?source=search_post---------6\n",
      "https://blog.sabio.la/ucla-and-uci-extension-coding-bootcamps-arent-really-bootcamps-a3b847777e14?source=search_post---------7\n",
      "https://blog.sabio.la/ucla-and-uci-extension-coding-bootcamps-arent-really-bootcamps-a3b847777e14?source=search_post---------7\n",
      "https://blog.sabio.la/ucla-and-uci-extension-coding-bootcamps-arent-really-bootcamps-a3b847777e14?source=search_post---------7\n",
      "https://medium.com/@hackupstate/the-most-important-questions-about-coding-bootcamps-beea11b914e0?source=search_post---------8\n",
      "https://medium.com/@hackupstate/the-most-important-questions-about-coding-bootcamps-beea11b914e0?source=search_post---------8\n",
      "https://medium.com/@hackupstate/the-most-important-questions-about-coding-bootcamps-beea11b914e0?source=search_post---------8\n",
      "https://medium.com/@hackreactor/a-deep-dive-into-the-roi-of-coding-bootcamps-e83ad2d4a18b?source=search_post---------9\n",
      "https://medium.com/@hackreactor/a-deep-dive-into-the-roi-of-coding-bootcamps-e83ad2d4a18b?source=search_post---------9\n",
      "https://medium.com/@hackreactor/a-deep-dive-into-the-roi-of-coding-bootcamps-e83ad2d4a18b?source=search_post---------9\n"
     ]
    }
   ],
   "source": [
    "#extract necessary link from href with certain paramters \n",
    "#lots of links of a webpage, only want ones that have a certain paramter\n",
    "href_links = bootcamp_list_parsed_html.find_all('a', href=True)\n",
    "for link in href_links:\n",
    "    if link.get('data-action') == 'open-post':\n",
    "        print(link.get('href'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ok so I've figured out how to get links on a webpage, and only look at the ones that open posts (there are 30 links with the `data-action='open-post'` and 57 links with a `data-action` attribute).   \n",
    "But I am not sure why some links repeat?  \n",
    "Let me see if I can do this find all at once and transform the list into a set. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Attempt to find links at once:\n",
    "import re\n",
    "href_links_fast = bootcamp_list_parsed_html.find_all('a', attrs={'href': re.compile(\"^http://\"), 'data-action':'open-post'})\n",
    "len(href_links_fast)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ok I wil make on working this more efficent later idk why that's not working.  \n",
    "Next I want to try calling my previous get info for one article function on the first link gathered so I can work on putting this into a function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error during requests to <a class=\"siteNav-logo\" data-log-event=\"home\" href=\"https://medium.com/\"><span class=\"svgIcon svgIcon--logoWordmark svgIcon--138x27px is-flushLeft u-xs-hide u-textColorDarker\"><svg class=\"svgIcon-use\" height=\"27\" width=\"138\"><path d=\"M130 27V16.96c0-3.26-.154-5.472-2.437-5.472-1.16 0-2.138.57-2.863 1.512.217.906.3 1.968.3 3.127 0 2.247.036 5.11 0 7.973 0 .472-.046.58.244.87L127 27h-8V16.96c0-3.297-.461-5.472-2.708-5.472-1.16 0-1.64.653-2.292 1.595V24.1c0 .472-.026.58.3.87L116 27h-8V11.56c0-.47-.07-.579-.36-.905L106 9h8v3.612c.906-2.537 2.437-4.112 5.372-4.112 2.682 0 4.494 1.466 5.255 4.257.834-2.392 3.008-4.257 6.053-4.257 3.588 0 5.32 2.626 5.32 7.627 0 2.392.036 5.11 0 7.973 0 .472.004.652.25.87L138 27h-8zm-27-3.045c0 .472-.149.617.178.906L105 27h-8v-4c-.906 2.465-2.956 4-5.637 4C87.775 27 86 24.39 86 19.461c0-2.391-.036-5 0-7.936 0-.471-.11-.58-.4-.87L84 9h8v9.628c0 3.225.269 5.4 2.298 5.4 1.16 0 2.086-.725 2.702-1.63V11.56c0-.471-.129-.58-.419-.906L95 9h8v14.955zM78.002.25A3.248 3.248 0 0 1 81.25 3.5 3.25 3.25 0 1 1 78.002.25zM75 27V11.56c0-.47.168-.579-.122-.905L73 9h8v15.1c0 .472-.01.678.24.9L83 27h-8zM64 11.706c-.507-.652-1.418-1.123-2.396-1.123-1.957 0-3.842 1.775-3.842 7.03 0 4.93 1.631 6.669 3.66 6.669.907 0 1.853-.436 2.578-1.378V11.706zm6 12.286c0 .47-.026.58.3.87L72 27h-8v-3.697C62.913 25.804 60.951 27 58.632 27 54.5 27 51.5 23.738 51.5 17.795c0-5.582 3.254-9.314 7.784-9.314 2.356 0 3.919 1.123 4.716 2.899V3.878c0-.471-.077-.617-.403-.906L62 1.305 70 .29v23.702zM43.9 16c.037-.471.037-.67.037-.815 0-4.747-.937-5.435-2.437-5.435-1.5 0-2.854.995-2.927 6.25h5.328zm-5.327 1c0 4.711 2.392 6.63 5.183 6.63 2.174 0 4.313-.943 5.509-3.335h.072c-.942 4.566-3.77 6.705-8.01 6.705-4.566 0-8.879-2.755-8.879-9.133 0-6.705 4.277-9.386 9.097-9.386 3.842 0 7.937 1.811 7.937 7.646 0 .109 0 .438-.036.873H38.573zM31.5 27h-12l2.39-2.646c.084-.084.11-.399.11-.87V7l-7.866 20L5.581 8.372C5.364 7.9 5.181 7.285 5 6.777V20.62c0 .58-.035.653.364 1.196L9 27H0l3.64-5.183c.399-.543.36-.616.36-1.196V6.27c0-.617.095-.69-.195-1.051L1 1h8.495l7.355 16.3L23.24 1h8.26l-2.2 2.75c-.326.326-.3.599-.3 1.106v18.629c0 .47.005.75.138.87L31.5 27z\"></path></svg></span><span class=\"svgIcon svgIcon--logoWordmark svgIcon--122x45px is-flushLeft u-xs-show u-textColorDarker\"><svg class=\"svgIcon-use\" height=\"45\" width=\"122\"><path d=\"M61.6 31.806c0 .412 0 .505.28.758l1.574 1.537v.065h-6.979v-2.95a4.852 4.852 0 0 1-4.627 3.203c-3.588 0-6.192-2.81-6.192-7.981 0-4.843 2.81-8.075 6.754-8.075a4.122 4.122 0 0 1 4.056 2.51v-6.51a.806.806 0 0 0-.319-.787l-1.499-1.443v-.065l6.951-.815v20.553zm-5.125-.937v-9.714a2.614 2.614 0 0 0-2.08-.975c-1.695 0-3.334 1.537-3.334 6.099 0 4.271 1.414 5.78 3.175 5.78a2.81 2.81 0 0 0 2.24-1.19zm9.752 3.297V21.051a.88.88 0 0 0-.281-.786L64.4 18.672v-.065h6.98v13.302c0 .412 0 .505.28.758l1.536 1.443v.066l-6.97-.01zm-.253-20.356a2.81 2.81 0 1 1 5.62 0 2.81 2.81 0 0 1-5.62 0zm24.234 17.967c0 .413 0 .534.281.787l1.574 1.537v.065h-7.017v-3.363a5.077 5.077 0 0 1-4.805 3.616c-3.11 0-4.778-2.267-4.778-6.557 0-2.07 0-4.337.066-6.885a.796.796 0 0 0-.281-.76l-1.546-1.545v-.065h6.923v8.552c0 2.81.412 4.684 2.173 4.684a2.81 2.81 0 0 0 2.267-1.415v-9.367a.88.88 0 0 0-.28-.787l-1.556-1.602v-.065h6.979v13.17zm23.756 2.39c0-.507.094-6.952.094-8.432 0-2.81-.44-4.75-2.417-4.75a3.138 3.138 0 0 0-2.482 1.35c.198.876.292 1.772.28 2.67 0 1.948-.065 4.43-.093 6.913a.796.796 0 0 0 .281.759l1.574 1.442v.066h-7.045c0-.468.094-6.95.094-8.431 0-2.857-.44-4.75-2.389-4.75a2.81 2.81 0 0 0-2.323 1.387v9.555c0 .412 0 .506.281.759l1.537 1.442v.066h-6.97V21.098a.88.88 0 0 0-.281-.787l-1.546-1.639v-.065h6.98v3.334a5.002 5.002 0 0 1 5.002-3.587c2.323 0 3.896 1.292 4.562 3.747a5.433 5.433 0 0 1 5.245-3.747c3.11 0 4.872 2.295 4.872 6.632 0 2.07-.066 4.43-.094 6.913a.75.75 0 0 0 .318.759l1.537 1.443v.065h-7.017zm-87.671-2.043l2.07 1.977v.065H17.862v-.065l2.107-1.977a.796.796 0 0 0 .281-.759V18.728c0-.534 0-1.255.094-1.873l-7.082 17.564h-.084L5.843 18.26c-.16-.402-.206-.43-.31-.702v10.595c-.087.71.034 1.429.348 2.07l2.95 3.879v.065H1v-.065l2.95-3.888a3.69 3.69 0 0 0 .347-2.06v-11.71a2.267 2.267 0 0 0-.487-1.602l-2.089-2.708v-.065h7.494l6.277 13.686 5.527-13.686h7.335v.065l-2.061 2.296a.806.806 0 0 0-.319.786v16.15a.75.75 0 0 0 .319.759zm8.215-6.332v.065c0 4.01 2.07 5.62 4.497 5.62a5.105 5.105 0 0 0 4.777-2.894h.066c-.844 3.963-3.298 5.836-6.97 5.836-3.962 0-7.7-2.389-7.7-7.925 0-5.817 3.747-8.14 7.887-8.14 3.335 0 6.886 1.573 6.886 6.632v.806h-9.443zm0-.806h4.618v-.815c0-4.122-.852-5.218-2.136-5.218-1.555 0-2.5 1.64-2.5 6.033h.018z\"></path></svg></span><span class=\"u-textScreenReader\">Homepage</span></a> : No connection adapters were found for '<a class=\"siteNav-logo\" data-log-event=\"home\" href=\"https://medium.com/\"><span class=\"svgIcon svgIcon--logoWordmark svgIcon--138x27px is-flushLeft u-xs-hide u-textColorDarker\"><svg class=\"svgIcon-use\" height=\"27\" width=\"138\"><path d=\"M130 27V16.96c0-3.26-.154-5.472-2.437-5.472-1.16 0-2.138.57-2.863 1.512.217.906.3 1.968.3 3.127 0 2.247.036 5.11 0 7.973 0 .472-.046.58.244.87L127 27h-8V16.96c0-3.297-.461-5.472-2.708-5.472-1.16 0-1.64.653-2.292 1.595V24.1c0 .472-.026.58.3.87L116 27h-8V11.56c0-.47-.07-.579-.36-.905L106 9h8v3.612c.906-2.537 2.437-4.112 5.372-4.112 2.682 0 4.494 1.466 5.255 4.257.834-2.392 3.008-4.257 6.053-4.257 3.588 0 5.32 2.626 5.32 7.627 0 2.392.036 5.11 0 7.973 0 .472.004.652.25.87L138 27h-8zm-27-3.045c0 .472-.149.617.178.906L105 27h-8v-4c-.906 2.465-2.956 4-5.637 4C87.775 27 86 24.39 86 19.461c0-2.391-.036-5 0-7.936 0-.471-.11-.58-.4-.87L84 9h8v9.628c0 3.225.269 5.4 2.298 5.4 1.16 0 2.086-.725 2.702-1.63V11.56c0-.471-.129-.58-.419-.906L95 9h8v14.955zM78.002.25A3.248 3.248 0 0 1 81.25 3.5 3.25 3.25 0 1 1 78.002.25zM75 27V11.56c0-.47.168-.579-.122-.905L73 9h8v15.1c0 .472-.01.678.24.9L83 27h-8zM64 11.706c-.507-.652-1.418-1.123-2.396-1.123-1.957 0-3.842 1.775-3.842 7.03 0 4.93 1.631 6.669 3.66 6.669.907 0 1.853-.436 2.578-1.378V11.706zm6 12.286c0 .47-.026.58.3.87L72 27h-8v-3.697C62.913 25.804 60.951 27 58.632 27 54.5 27 51.5 23.738 51.5 17.795c0-5.582 3.254-9.314 7.784-9.314 2.356 0 3.919 1.123 4.716 2.899V3.878c0-.471-.077-.617-.403-.906L62 1.305 70 .29v23.702zM43.9 16c.037-.471.037-.67.037-.815 0-4.747-.937-5.435-2.437-5.435-1.5 0-2.854.995-2.927 6.25h5.328zm-5.327 1c0 4.711 2.392 6.63 5.183 6.63 2.174 0 4.313-.943 5.509-3.335h.072c-.942 4.566-3.77 6.705-8.01 6.705-4.566 0-8.879-2.755-8.879-9.133 0-6.705 4.277-9.386 9.097-9.386 3.842 0 7.937 1.811 7.937 7.646 0 .109 0 .438-.036.873H38.573zM31.5 27h-12l2.39-2.646c.084-.084.11-.399.11-.87V7l-7.866 20L5.581 8.372C5.364 7.9 5.181 7.285 5 6.777V20.62c0 .58-.035.653.364 1.196L9 27H0l3.64-5.183c.399-.543.36-.616.36-1.196V6.27c0-.617.095-.69-.195-1.051L1 1h8.495l7.355 16.3L23.24 1h8.26l-2.2 2.75c-.326.326-.3.599-.3 1.106v18.629c0 .47.005.75.138.87L31.5 27z\"></path></svg></span><span class=\"svgIcon svgIcon--logoWordmark svgIcon--122x45px is-flushLeft u-xs-show u-textColorDarker\"><svg class=\"svgIcon-use\" height=\"45\" width=\"122\"><path d=\"M61.6 31.806c0 .412 0 .505.28.758l1.574 1.537v.065h-6.979v-2.95a4.852 4.852 0 0 1-4.627 3.203c-3.588 0-6.192-2.81-6.192-7.981 0-4.843 2.81-8.075 6.754-8.075a4.122 4.122 0 0 1 4.056 2.51v-6.51a.806.806 0 0 0-.319-.787l-1.499-1.443v-.065l6.951-.815v20.553zm-5.125-.937v-9.714a2.614 2.614 0 0 0-2.08-.975c-1.695 0-3.334 1.537-3.334 6.099 0 4.271 1.414 5.78 3.175 5.78a2.81 2.81 0 0 0 2.24-1.19zm9.752 3.297V21.051a.88.88 0 0 0-.281-.786L64.4 18.672v-.065h6.98v13.302c0 .412 0 .505.28.758l1.536 1.443v.066l-6.97-.01zm-.253-20.356a2.81 2.81 0 1 1 5.62 0 2.81 2.81 0 0 1-5.62 0zm24.234 17.967c0 .413 0 .534.281.787l1.574 1.537v.065h-7.017v-3.363a5.077 5.077 0 0 1-4.805 3.616c-3.11 0-4.778-2.267-4.778-6.557 0-2.07 0-4.337.066-6.885a.796.796 0 0 0-.281-.76l-1.546-1.545v-.065h6.923v8.552c0 2.81.412 4.684 2.173 4.684a2.81 2.81 0 0 0 2.267-1.415v-9.367a.88.88 0 0 0-.28-.787l-1.556-1.602v-.065h6.979v13.17zm23.756 2.39c0-.507.094-6.952.094-8.432 0-2.81-.44-4.75-2.417-4.75a3.138 3.138 0 0 0-2.482 1.35c.198.876.292 1.772.28 2.67 0 1.948-.065 4.43-.093 6.913a.796.796 0 0 0 .281.759l1.574 1.442v.066h-7.045c0-.468.094-6.95.094-8.431 0-2.857-.44-4.75-2.389-4.75a2.81 2.81 0 0 0-2.323 1.387v9.555c0 .412 0 .506.281.759l1.537 1.442v.066h-6.97V21.098a.88.88 0 0 0-.281-.787l-1.546-1.639v-.065h6.98v3.334a5.002 5.002 0 0 1 5.002-3.587c2.323 0 3.896 1.292 4.562 3.747a5.433 5.433 0 0 1 5.245-3.747c3.11 0 4.872 2.295 4.872 6.632 0 2.07-.066 4.43-.094 6.913a.75.75 0 0 0 .318.759l1.537 1.443v.065h-7.017zm-87.671-2.043l2.07 1.977v.065H17.862v-.065l2.107-1.977a.796.796 0 0 0 .281-.759V18.728c0-.534 0-1.255.094-1.873l-7.082 17.564h-.084L5.843 18.26c-.16-.402-.206-.43-.31-.702v10.595c-.087.71.034 1.429.348 2.07l2.95 3.879v.065H1v-.065l2.95-3.888a3.69 3.69 0 0 0 .347-2.06v-11.71a2.267 2.267 0 0 0-.487-1.602l-2.089-2.708v-.065h7.494l6.277 13.686 5.527-13.686h7.335v.065l-2.061 2.296a.806.806 0 0 0-.319.786v16.15a.75.75 0 0 0 .319.759zm8.215-6.332v.065c0 4.01 2.07 5.62 4.497 5.62a5.105 5.105 0 0 0 4.777-2.894h.066c-.844 3.963-3.298 5.836-6.97 5.836-3.962 0-7.7-2.389-7.7-7.925 0-5.817 3.747-8.14 7.887-8.14 3.335 0 6.886 1.573 6.886 6.632v.806h-9.443zm0-.806h4.618v-.815c0-4.122-.852-5.218-2.136-5.218-1.555 0-2.5 1.64-2.5 6.033h.018z\"></path></svg></span><span class=\"u-textScreenReader\">Homepage</span></a>'\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "object of type 'NoneType' has no len()",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-20-ea3bda7f39c1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mfirst_link\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhref_links\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mfirst_link_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_all_article_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfirst_link\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mfirst_link_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m#should be \"The dirty little secrets...\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-16-0582db50a1e1>\u001b[0m in \u001b[0;36mget_all_article_info\u001b[0;34m(article_url)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \"\"\"\n\u001b[1;32m     54\u001b[0m     \u001b[0mraw_html\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msimple_get\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marticle_url\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m     \u001b[0mparsed_html\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBeautifulSoup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mraw_html\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'html.parser'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m     \u001b[0mauthor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_author\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0mauthor_bio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_author_bio\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.6/site-packages/bs4/__init__.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, markup, features, builder, parse_only, from_encoding, exclude_encodings, **kwargs)\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmarkup\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'read'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m        \u001b[0;31m# It's a file-type object.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m             \u001b[0mmarkup\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmarkup\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 192\u001b[0;31m         elif len(markup) <= 256 and (\n\u001b[0m\u001b[1;32m    193\u001b[0m                 \u001b[0;34m(\u001b[0m\u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmarkup\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34mb'<'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmarkup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    194\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmarkup\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m'<'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmarkup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: object of type 'NoneType' has no len()"
     ]
    }
   ],
   "source": [
    "first_link = href_links[0]\n",
    "first_link_info = get_all_article_info(first_link)\n",
    "first_link_info[2] #should be \"The dirty little secrets...\" "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ok its too late at night for me to debug this will try again tomorrow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**next day**  \n",
    "Hmm maybe there's just something wrong with the first link? Let me just try the next one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error during requests to <a class=\"siteNav-logo\" data-log-event=\"home\" href=\"https://medium.com/\"><span class=\"svgIcon svgIcon--logoWordmark svgIcon--138x27px is-flushLeft u-xs-hide u-textColorDarker\"><svg class=\"svgIcon-use\" height=\"27\" width=\"138\"><path d=\"M130 27V16.96c0-3.26-.154-5.472-2.437-5.472-1.16 0-2.138.57-2.863 1.512.217.906.3 1.968.3 3.127 0 2.247.036 5.11 0 7.973 0 .472-.046.58.244.87L127 27h-8V16.96c0-3.297-.461-5.472-2.708-5.472-1.16 0-1.64.653-2.292 1.595V24.1c0 .472-.026.58.3.87L116 27h-8V11.56c0-.47-.07-.579-.36-.905L106 9h8v3.612c.906-2.537 2.437-4.112 5.372-4.112 2.682 0 4.494 1.466 5.255 4.257.834-2.392 3.008-4.257 6.053-4.257 3.588 0 5.32 2.626 5.32 7.627 0 2.392.036 5.11 0 7.973 0 .472.004.652.25.87L138 27h-8zm-27-3.045c0 .472-.149.617.178.906L105 27h-8v-4c-.906 2.465-2.956 4-5.637 4C87.775 27 86 24.39 86 19.461c0-2.391-.036-5 0-7.936 0-.471-.11-.58-.4-.87L84 9h8v9.628c0 3.225.269 5.4 2.298 5.4 1.16 0 2.086-.725 2.702-1.63V11.56c0-.471-.129-.58-.419-.906L95 9h8v14.955zM78.002.25A3.248 3.248 0 0 1 81.25 3.5 3.25 3.25 0 1 1 78.002.25zM75 27V11.56c0-.47.168-.579-.122-.905L73 9h8v15.1c0 .472-.01.678.24.9L83 27h-8zM64 11.706c-.507-.652-1.418-1.123-2.396-1.123-1.957 0-3.842 1.775-3.842 7.03 0 4.93 1.631 6.669 3.66 6.669.907 0 1.853-.436 2.578-1.378V11.706zm6 12.286c0 .47-.026.58.3.87L72 27h-8v-3.697C62.913 25.804 60.951 27 58.632 27 54.5 27 51.5 23.738 51.5 17.795c0-5.582 3.254-9.314 7.784-9.314 2.356 0 3.919 1.123 4.716 2.899V3.878c0-.471-.077-.617-.403-.906L62 1.305 70 .29v23.702zM43.9 16c.037-.471.037-.67.037-.815 0-4.747-.937-5.435-2.437-5.435-1.5 0-2.854.995-2.927 6.25h5.328zm-5.327 1c0 4.711 2.392 6.63 5.183 6.63 2.174 0 4.313-.943 5.509-3.335h.072c-.942 4.566-3.77 6.705-8.01 6.705-4.566 0-8.879-2.755-8.879-9.133 0-6.705 4.277-9.386 9.097-9.386 3.842 0 7.937 1.811 7.937 7.646 0 .109 0 .438-.036.873H38.573zM31.5 27h-12l2.39-2.646c.084-.084.11-.399.11-.87V7l-7.866 20L5.581 8.372C5.364 7.9 5.181 7.285 5 6.777V20.62c0 .58-.035.653.364 1.196L9 27H0l3.64-5.183c.399-.543.36-.616.36-1.196V6.27c0-.617.095-.69-.195-1.051L1 1h8.495l7.355 16.3L23.24 1h8.26l-2.2 2.75c-.326.326-.3.599-.3 1.106v18.629c0 .47.005.75.138.87L31.5 27z\"></path></svg></span><span class=\"svgIcon svgIcon--logoWordmark svgIcon--122x45px is-flushLeft u-xs-show u-textColorDarker\"><svg class=\"svgIcon-use\" height=\"45\" width=\"122\"><path d=\"M61.6 31.806c0 .412 0 .505.28.758l1.574 1.537v.065h-6.979v-2.95a4.852 4.852 0 0 1-4.627 3.203c-3.588 0-6.192-2.81-6.192-7.981 0-4.843 2.81-8.075 6.754-8.075a4.122 4.122 0 0 1 4.056 2.51v-6.51a.806.806 0 0 0-.319-.787l-1.499-1.443v-.065l6.951-.815v20.553zm-5.125-.937v-9.714a2.614 2.614 0 0 0-2.08-.975c-1.695 0-3.334 1.537-3.334 6.099 0 4.271 1.414 5.78 3.175 5.78a2.81 2.81 0 0 0 2.24-1.19zm9.752 3.297V21.051a.88.88 0 0 0-.281-.786L64.4 18.672v-.065h6.98v13.302c0 .412 0 .505.28.758l1.536 1.443v.066l-6.97-.01zm-.253-20.356a2.81 2.81 0 1 1 5.62 0 2.81 2.81 0 0 1-5.62 0zm24.234 17.967c0 .413 0 .534.281.787l1.574 1.537v.065h-7.017v-3.363a5.077 5.077 0 0 1-4.805 3.616c-3.11 0-4.778-2.267-4.778-6.557 0-2.07 0-4.337.066-6.885a.796.796 0 0 0-.281-.76l-1.546-1.545v-.065h6.923v8.552c0 2.81.412 4.684 2.173 4.684a2.81 2.81 0 0 0 2.267-1.415v-9.367a.88.88 0 0 0-.28-.787l-1.556-1.602v-.065h6.979v13.17zm23.756 2.39c0-.507.094-6.952.094-8.432 0-2.81-.44-4.75-2.417-4.75a3.138 3.138 0 0 0-2.482 1.35c.198.876.292 1.772.28 2.67 0 1.948-.065 4.43-.093 6.913a.796.796 0 0 0 .281.759l1.574 1.442v.066h-7.045c0-.468.094-6.95.094-8.431 0-2.857-.44-4.75-2.389-4.75a2.81 2.81 0 0 0-2.323 1.387v9.555c0 .412 0 .506.281.759l1.537 1.442v.066h-6.97V21.098a.88.88 0 0 0-.281-.787l-1.546-1.639v-.065h6.98v3.334a5.002 5.002 0 0 1 5.002-3.587c2.323 0 3.896 1.292 4.562 3.747a5.433 5.433 0 0 1 5.245-3.747c3.11 0 4.872 2.295 4.872 6.632 0 2.07-.066 4.43-.094 6.913a.75.75 0 0 0 .318.759l1.537 1.443v.065h-7.017zm-87.671-2.043l2.07 1.977v.065H17.862v-.065l2.107-1.977a.796.796 0 0 0 .281-.759V18.728c0-.534 0-1.255.094-1.873l-7.082 17.564h-.084L5.843 18.26c-.16-.402-.206-.43-.31-.702v10.595c-.087.71.034 1.429.348 2.07l2.95 3.879v.065H1v-.065l2.95-3.888a3.69 3.69 0 0 0 .347-2.06v-11.71a2.267 2.267 0 0 0-.487-1.602l-2.089-2.708v-.065h7.494l6.277 13.686 5.527-13.686h7.335v.065l-2.061 2.296a.806.806 0 0 0-.319.786v16.15a.75.75 0 0 0 .319.759zm8.215-6.332v.065c0 4.01 2.07 5.62 4.497 5.62a5.105 5.105 0 0 0 4.777-2.894h.066c-.844 3.963-3.298 5.836-6.97 5.836-3.962 0-7.7-2.389-7.7-7.925 0-5.817 3.747-8.14 7.887-8.14 3.335 0 6.886 1.573 6.886 6.632v.806h-9.443zm0-.806h4.618v-.815c0-4.122-.852-5.218-2.136-5.218-1.555 0-2.5 1.64-2.5 6.033h.018z\"></path></svg></span><span class=\"u-textScreenReader\">Homepage</span></a> : No connection adapters were found for '<a class=\"siteNav-logo\" data-log-event=\"home\" href=\"https://medium.com/\"><span class=\"svgIcon svgIcon--logoWordmark svgIcon--138x27px is-flushLeft u-xs-hide u-textColorDarker\"><svg class=\"svgIcon-use\" height=\"27\" width=\"138\"><path d=\"M130 27V16.96c0-3.26-.154-5.472-2.437-5.472-1.16 0-2.138.57-2.863 1.512.217.906.3 1.968.3 3.127 0 2.247.036 5.11 0 7.973 0 .472-.046.58.244.87L127 27h-8V16.96c0-3.297-.461-5.472-2.708-5.472-1.16 0-1.64.653-2.292 1.595V24.1c0 .472-.026.58.3.87L116 27h-8V11.56c0-.47-.07-.579-.36-.905L106 9h8v3.612c.906-2.537 2.437-4.112 5.372-4.112 2.682 0 4.494 1.466 5.255 4.257.834-2.392 3.008-4.257 6.053-4.257 3.588 0 5.32 2.626 5.32 7.627 0 2.392.036 5.11 0 7.973 0 .472.004.652.25.87L138 27h-8zm-27-3.045c0 .472-.149.617.178.906L105 27h-8v-4c-.906 2.465-2.956 4-5.637 4C87.775 27 86 24.39 86 19.461c0-2.391-.036-5 0-7.936 0-.471-.11-.58-.4-.87L84 9h8v9.628c0 3.225.269 5.4 2.298 5.4 1.16 0 2.086-.725 2.702-1.63V11.56c0-.471-.129-.58-.419-.906L95 9h8v14.955zM78.002.25A3.248 3.248 0 0 1 81.25 3.5 3.25 3.25 0 1 1 78.002.25zM75 27V11.56c0-.47.168-.579-.122-.905L73 9h8v15.1c0 .472-.01.678.24.9L83 27h-8zM64 11.706c-.507-.652-1.418-1.123-2.396-1.123-1.957 0-3.842 1.775-3.842 7.03 0 4.93 1.631 6.669 3.66 6.669.907 0 1.853-.436 2.578-1.378V11.706zm6 12.286c0 .47-.026.58.3.87L72 27h-8v-3.697C62.913 25.804 60.951 27 58.632 27 54.5 27 51.5 23.738 51.5 17.795c0-5.582 3.254-9.314 7.784-9.314 2.356 0 3.919 1.123 4.716 2.899V3.878c0-.471-.077-.617-.403-.906L62 1.305 70 .29v23.702zM43.9 16c.037-.471.037-.67.037-.815 0-4.747-.937-5.435-2.437-5.435-1.5 0-2.854.995-2.927 6.25h5.328zm-5.327 1c0 4.711 2.392 6.63 5.183 6.63 2.174 0 4.313-.943 5.509-3.335h.072c-.942 4.566-3.77 6.705-8.01 6.705-4.566 0-8.879-2.755-8.879-9.133 0-6.705 4.277-9.386 9.097-9.386 3.842 0 7.937 1.811 7.937 7.646 0 .109 0 .438-.036.873H38.573zM31.5 27h-12l2.39-2.646c.084-.084.11-.399.11-.87V7l-7.866 20L5.581 8.372C5.364 7.9 5.181 7.285 5 6.777V20.62c0 .58-.035.653.364 1.196L9 27H0l3.64-5.183c.399-.543.36-.616.36-1.196V6.27c0-.617.095-.69-.195-1.051L1 1h8.495l7.355 16.3L23.24 1h8.26l-2.2 2.75c-.326.326-.3.599-.3 1.106v18.629c0 .47.005.75.138.87L31.5 27z\"></path></svg></span><span class=\"svgIcon svgIcon--logoWordmark svgIcon--122x45px is-flushLeft u-xs-show u-textColorDarker\"><svg class=\"svgIcon-use\" height=\"45\" width=\"122\"><path d=\"M61.6 31.806c0 .412 0 .505.28.758l1.574 1.537v.065h-6.979v-2.95a4.852 4.852 0 0 1-4.627 3.203c-3.588 0-6.192-2.81-6.192-7.981 0-4.843 2.81-8.075 6.754-8.075a4.122 4.122 0 0 1 4.056 2.51v-6.51a.806.806 0 0 0-.319-.787l-1.499-1.443v-.065l6.951-.815v20.553zm-5.125-.937v-9.714a2.614 2.614 0 0 0-2.08-.975c-1.695 0-3.334 1.537-3.334 6.099 0 4.271 1.414 5.78 3.175 5.78a2.81 2.81 0 0 0 2.24-1.19zm9.752 3.297V21.051a.88.88 0 0 0-.281-.786L64.4 18.672v-.065h6.98v13.302c0 .412 0 .505.28.758l1.536 1.443v.066l-6.97-.01zm-.253-20.356a2.81 2.81 0 1 1 5.62 0 2.81 2.81 0 0 1-5.62 0zm24.234 17.967c0 .413 0 .534.281.787l1.574 1.537v.065h-7.017v-3.363a5.077 5.077 0 0 1-4.805 3.616c-3.11 0-4.778-2.267-4.778-6.557 0-2.07 0-4.337.066-6.885a.796.796 0 0 0-.281-.76l-1.546-1.545v-.065h6.923v8.552c0 2.81.412 4.684 2.173 4.684a2.81 2.81 0 0 0 2.267-1.415v-9.367a.88.88 0 0 0-.28-.787l-1.556-1.602v-.065h6.979v13.17zm23.756 2.39c0-.507.094-6.952.094-8.432 0-2.81-.44-4.75-2.417-4.75a3.138 3.138 0 0 0-2.482 1.35c.198.876.292 1.772.28 2.67 0 1.948-.065 4.43-.093 6.913a.796.796 0 0 0 .281.759l1.574 1.442v.066h-7.045c0-.468.094-6.95.094-8.431 0-2.857-.44-4.75-2.389-4.75a2.81 2.81 0 0 0-2.323 1.387v9.555c0 .412 0 .506.281.759l1.537 1.442v.066h-6.97V21.098a.88.88 0 0 0-.281-.787l-1.546-1.639v-.065h6.98v3.334a5.002 5.002 0 0 1 5.002-3.587c2.323 0 3.896 1.292 4.562 3.747a5.433 5.433 0 0 1 5.245-3.747c3.11 0 4.872 2.295 4.872 6.632 0 2.07-.066 4.43-.094 6.913a.75.75 0 0 0 .318.759l1.537 1.443v.065h-7.017zm-87.671-2.043l2.07 1.977v.065H17.862v-.065l2.107-1.977a.796.796 0 0 0 .281-.759V18.728c0-.534 0-1.255.094-1.873l-7.082 17.564h-.084L5.843 18.26c-.16-.402-.206-.43-.31-.702v10.595c-.087.71.034 1.429.348 2.07l2.95 3.879v.065H1v-.065l2.95-3.888a3.69 3.69 0 0 0 .347-2.06v-11.71a2.267 2.267 0 0 0-.487-1.602l-2.089-2.708v-.065h7.494l6.277 13.686 5.527-13.686h7.335v.065l-2.061 2.296a.806.806 0 0 0-.319.786v16.15a.75.75 0 0 0 .319.759zm8.215-6.332v.065c0 4.01 2.07 5.62 4.497 5.62a5.105 5.105 0 0 0 4.777-2.894h.066c-.844 3.963-3.298 5.836-6.97 5.836-3.962 0-7.7-2.389-7.7-7.925 0-5.817 3.747-8.14 7.887-8.14 3.335 0 6.886 1.573 6.886 6.632v.806h-9.443zm0-.806h4.618v-.815c0-4.122-.852-5.218-2.136-5.218-1.555 0-2.5 1.64-2.5 6.033h.018z\"></path></svg></span><span class=\"u-textScreenReader\">Homepage</span></a>'\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "object of type 'NoneType' has no len()",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-21-9bc561f88be3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mnext_link\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhref_links\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mfirst_link_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_all_article_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfirst_link\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mfirst_link_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-16-0582db50a1e1>\u001b[0m in \u001b[0;36mget_all_article_info\u001b[0;34m(article_url)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \"\"\"\n\u001b[1;32m     54\u001b[0m     \u001b[0mraw_html\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msimple_get\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marticle_url\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m     \u001b[0mparsed_html\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBeautifulSoup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mraw_html\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'html.parser'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m     \u001b[0mauthor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_author\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0mauthor_bio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_author_bio\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.6/site-packages/bs4/__init__.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, markup, features, builder, parse_only, from_encoding, exclude_encodings, **kwargs)\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmarkup\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'read'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m        \u001b[0;31m# It's a file-type object.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m             \u001b[0mmarkup\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmarkup\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 192\u001b[0;31m         elif len(markup) <= 256 and (\n\u001b[0m\u001b[1;32m    193\u001b[0m                 \u001b[0;34m(\u001b[0m\u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmarkup\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34mb'<'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmarkup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    194\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmarkup\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m'<'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmarkup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: object of type 'NoneType' has no len()"
     ]
    }
   ],
   "source": [
    "next_link = href_links[3]\n",
    "first_link_info = get_all_article_info(first_link)\n",
    "first_link_info[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "hmm weirdly when I just copy and paste the first link into my chrome browser, it redirects just fine - so then I think there is something wrong with my function...\n",
    "oh wait I think I need to pass in the link as a string - I just assumed it was but maybe its not?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bs4.element.Tag"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(href_links[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "aha!! That is the issue...my function expects a string url not whatever this object is.\n",
    "now I just need to figure out how to convert this to a string of the link url itself (and not any extra stuff). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Homepage\n",
      "Become a member\n",
      "\n",
      "Sign in\n",
      "Get started\n",
      "Homepage\n",
      "Stories\n",
      "People\n",
      "Publications\n",
      "Tags\n",
      "\n",
      "Ken Mazaika\n",
      "Techspiration + Ideas + Making It Happen\n",
      "Jun 29, 2015\n",
      "The Dirty Little Secrets About The Worst Coding Bootcamps Out There9 out of 10 programs are outright…\n",
      "Read more…\n",
      "25 responses\n",
      "\n",
      "Quincy Larson\n",
      "freeCodeCamp.org\n",
      "Dec 6, 2016\n",
      "Code Briefing: Yes, there are completely free coding bootcamps\n",
      "Read more…\n",
      "1 response\n",
      "\n",
      "Roshan Choxi\n",
      "Nov 23, 2015\n",
      "Lies, Damned Lies, and Statistics: Coding Bootcamps and the Authenticity of Placement RatesAUTHENTICITYWe’ve never formalized our core values at Bloc, but if you surveyed our employees you would probably see authenticity in the…\n",
      "Read more…\n",
      "\n",
      "Audrey Watters\n",
      "The History of the Future of Education\n",
      "Nov 23, 2015\n",
      "Coding Bootcamps and the New For-Profit Higher EdAfter decades of explosive growth, the future of…\n",
      "Read more…\n",
      "\n",
      "Dev Bootcamp\n",
      "Jan 20, 2016\n",
      "Coding Bootcamps: 2015 Year-in-Review and 2016 PredictionsJon Stowe, President, Dev Bootcamp\n",
      "Read more…\n",
      "\n",
      "Coder Academy\n",
      "Code Like A Girl\n",
      "Feb 21\n",
      "Are Coding Bootcamps Worth It?Course Report, the leading authority in bootcamp education, reported that in 2017 coding bootcamps will…\n",
      "Read more…\n",
      "\n",
      "Ken Mazaika\n",
      "Oct 31, 2016\n",
      "23 Things Aspiring Developers Should Know About Online Coding Bootcamps\n",
      "Read more…\n",
      "1 response\n",
      "\n",
      "Sabio Coding Bootcamp\n",
      "Sabio Coding Bootcamp\n",
      "Jul 11, 2017\n",
      "UCLA and UCI Extension Coding Bootcamps Aren’t Really BootcampsBy Kelsey AustinEducation about software engineering has never been so accessible for aspiring coders. For some, the journey begins through computer science courses at universities.\n",
      "Read more…\n",
      "\n",
      "Hack Upstate\n",
      "Jul 22, 2016\n",
      "The Most Important Questions About Coding BootcampsEnrolling in a bootcamp is a big decision.\n",
      "Read more…\n",
      "\n",
      "Hack Reactor\n",
      "Dec 4, 2017\n",
      "A Deep Dive into the ROI of Coding BootcampsThinking about signing up for coding bootcamp? Before taking the plunge, it’s…\n",
      "Read more…\n",
      "Code States\n",
      "Coding Bootcamps\n",
      "Programming\n",
      "Coding\n",
      "Codingbootcamp\n",
      "Bootcamp\n",
      "Web Development\n",
      "JavaScript\n",
      "Learning To Code\n",
      "Tech\n",
      "\n",
      "Coder Academy\n",
      "https://coderacademy.edu.au\n",
      "\n",
      "Hack Reactor\n",
      "\n",
      "DevMountain\n",
      "\n",
      "Coding Blocks\n",
      "\n",
      "Thinkful\n",
      "\n",
      "CodeClan\n"
     ]
    }
   ],
   "source": [
    "for i in href_links:\n",
    "    print(i.text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ok let's try this again - how can I get the result set back as a string so I can call my function on it?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 0 on the bootcamp story page.\n"
     ]
    }
   ],
   "source": [
    "#Lets just get all the links again and sort through in a different way\n",
    "all_links = bootcamp_list_parsed_html.findAll('a', attrs={'href': re.compile(\"^http://\")})\n",
    "print(\"There are \" + str(len(all_links)) + \" on the bootcamp story page.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "what the ???"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "oh wait https! THis must be an old tutoria"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 91 on the bootcamp story page.\n"
     ]
    }
   ],
   "source": [
    "all_links = bootcamp_list_parsed_html.findAll('a', attrs={'href': re.compile(\"^https://\")})\n",
    "print(\"There are \" + str(len(all_links)) + \" on the bootcamp story page.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[None,\n",
       " None,\n",
       " None,\n",
       " 'sign-in-prompt',\n",
       " 'sign-up-prompt',\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " 'show-user-card',\n",
       " 'show-user-card',\n",
       " 'show-collection-card',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " None,\n",
       " 'show-user-card',\n",
       " 'show-user-card',\n",
       " 'show-collection-card',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " None,\n",
       " 'show-user-card',\n",
       " 'show-user-card',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'show-user-card',\n",
       " 'show-user-card',\n",
       " 'show-collection-card',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'show-user-card',\n",
       " 'show-user-card',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'show-user-card',\n",
       " 'show-user-card',\n",
       " 'show-collection-card',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'show-user-card',\n",
       " 'show-user-card',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " None,\n",
       " 'show-user-card',\n",
       " 'show-user-card',\n",
       " 'show-collection-card',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'show-user-card',\n",
       " 'show-user-card',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'show-user-card',\n",
       " 'show-user-card',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " 'open-post',\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What are the different options for data-action attribute of the links?\n",
    "# I think all the links we want have a 'open-post' data-action but curious\n",
    "data_actions = [link.get('data-action') for link in all_links]\n",
    "data_actions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ok so from these we can see that we do wan the html links that have a 'open-post' data-action."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<a class=\"siteNav-logo\" data-log-event=\"home\" href=\"https://medium.com/\"><span class=\"svgIcon svgIcon--logoWordmark svgIcon--138x27px is-flushLeft u-xs-hide u-textColorDarker\"><svg class=\"svgIcon-use\" height=\"27\" width=\"138\"><path d=\"M130 27V16.96c0-3.26-.154-5.472-2.437-5.472-1.16 0-2.138.57-2.863 1.512.217.906.3 1.968.3 3.127 0 2.247.036 5.11 0 7.973 0 .472-.046.58.244.87L127 27h-8V16.96c0-3.297-.461-5.472-2.708-5.472-1.16 0-1.64.653-2.292 1.595V24.1c0 .472-.026.58.3.87L116 27h-8V11.56c0-.47-.07-.579-.36-.905L106 9h8v3.612c.906-2.537 2.437-4.112 5.372-4.112 2.682 0 4.494 1.466 5.255 4.257.834-2.392 3.008-4.257 6.053-4.257 3.588 0 5.32 2.626 5.32 7.627 0 2.392.036 5.11 0 7.973 0 .472.004.652.25.87L138 27h-8zm-27-3.045c0 .472-.149.617.178.906L105 27h-8v-4c-.906 2.465-2.956 4-5.637 4C87.775 27 86 24.39 86 19.461c0-2.391-.036-5 0-7.936 0-.471-.11-.58-.4-.87L84 9h8v9.628c0 3.225.269 5.4 2.298 5.4 1.16 0 2.086-.725 2.702-1.63V11.56c0-.471-.129-.58-.419-.906L95 9h8v14.955zM78.002.25A3.248 3.248 0 0 1 81.25 3.5 3.25 3.25 0 1 1 78.002.25zM75 27V11.56c0-.47.168-.579-.122-.905L73 9h8v15.1c0 .472-.01.678.24.9L83 27h-8zM64 11.706c-.507-.652-1.418-1.123-2.396-1.123-1.957 0-3.842 1.775-3.842 7.03 0 4.93 1.631 6.669 3.66 6.669.907 0 1.853-.436 2.578-1.378V11.706zm6 12.286c0 .47-.026.58.3.87L72 27h-8v-3.697C62.913 25.804 60.951 27 58.632 27 54.5 27 51.5 23.738 51.5 17.795c0-5.582 3.254-9.314 7.784-9.314 2.356 0 3.919 1.123 4.716 2.899V3.878c0-.471-.077-.617-.403-.906L62 1.305 70 .29v23.702zM43.9 16c.037-.471.037-.67.037-.815 0-4.747-.937-5.435-2.437-5.435-1.5 0-2.854.995-2.927 6.25h5.328zm-5.327 1c0 4.711 2.392 6.63 5.183 6.63 2.174 0 4.313-.943 5.509-3.335h.072c-.942 4.566-3.77 6.705-8.01 6.705-4.566 0-8.879-2.755-8.879-9.133 0-6.705 4.277-9.386 9.097-9.386 3.842 0 7.937 1.811 7.937 7.646 0 .109 0 .438-.036.873H38.573zM31.5 27h-12l2.39-2.646c.084-.084.11-.399.11-.87V7l-7.866 20L5.581 8.372C5.364 7.9 5.181 7.285 5 6.777V20.62c0 .58-.035.653.364 1.196L9 27H0l3.64-5.183c.399-.543.36-.616.36-1.196V6.27c0-.617.095-.69-.195-1.051L1 1h8.495l7.355 16.3L23.24 1h8.26l-2.2 2.75c-.326.326-.3.599-.3 1.106v18.629c0 .47.005.75.138.87L31.5 27z\"></path></svg></span><span class=\"svgIcon svgIcon--logoWordmark svgIcon--122x45px is-flushLeft u-xs-show u-textColorDarker\"><svg class=\"svgIcon-use\" height=\"45\" width=\"122\"><path d=\"M61.6 31.806c0 .412 0 .505.28.758l1.574 1.537v.065h-6.979v-2.95a4.852 4.852 0 0 1-4.627 3.203c-3.588 0-6.192-2.81-6.192-7.981 0-4.843 2.81-8.075 6.754-8.075a4.122 4.122 0 0 1 4.056 2.51v-6.51a.806.806 0 0 0-.319-.787l-1.499-1.443v-.065l6.951-.815v20.553zm-5.125-.937v-9.714a2.614 2.614 0 0 0-2.08-.975c-1.695 0-3.334 1.537-3.334 6.099 0 4.271 1.414 5.78 3.175 5.78a2.81 2.81 0 0 0 2.24-1.19zm9.752 3.297V21.051a.88.88 0 0 0-.281-.786L64.4 18.672v-.065h6.98v13.302c0 .412 0 .505.28.758l1.536 1.443v.066l-6.97-.01zm-.253-20.356a2.81 2.81 0 1 1 5.62 0 2.81 2.81 0 0 1-5.62 0zm24.234 17.967c0 .413 0 .534.281.787l1.574 1.537v.065h-7.017v-3.363a5.077 5.077 0 0 1-4.805 3.616c-3.11 0-4.778-2.267-4.778-6.557 0-2.07 0-4.337.066-6.885a.796.796 0 0 0-.281-.76l-1.546-1.545v-.065h6.923v8.552c0 2.81.412 4.684 2.173 4.684a2.81 2.81 0 0 0 2.267-1.415v-9.367a.88.88 0 0 0-.28-.787l-1.556-1.602v-.065h6.979v13.17zm23.756 2.39c0-.507.094-6.952.094-8.432 0-2.81-.44-4.75-2.417-4.75a3.138 3.138 0 0 0-2.482 1.35c.198.876.292 1.772.28 2.67 0 1.948-.065 4.43-.093 6.913a.796.796 0 0 0 .281.759l1.574 1.442v.066h-7.045c0-.468.094-6.95.094-8.431 0-2.857-.44-4.75-2.389-4.75a2.81 2.81 0 0 0-2.323 1.387v9.555c0 .412 0 .506.281.759l1.537 1.442v.066h-6.97V21.098a.88.88 0 0 0-.281-.787l-1.546-1.639v-.065h6.98v3.334a5.002 5.002 0 0 1 5.002-3.587c2.323 0 3.896 1.292 4.562 3.747a5.433 5.433 0 0 1 5.245-3.747c3.11 0 4.872 2.295 4.872 6.632 0 2.07-.066 4.43-.094 6.913a.75.75 0 0 0 .318.759l1.537 1.443v.065h-7.017zm-87.671-2.043l2.07 1.977v.065H17.862v-.065l2.107-1.977a.796.796 0 0 0 .281-.759V18.728c0-.534 0-1.255.094-1.873l-7.082 17.564h-.084L5.843 18.26c-.16-.402-.206-.43-.31-.702v10.595c-.087.71.034 1.429.348 2.07l2.95 3.879v.065H1v-.065l2.95-3.888a3.69 3.69 0 0 0 .347-2.06v-11.71a2.267 2.267 0 0 0-.487-1.602l-2.089-2.708v-.065h7.494l6.277 13.686 5.527-13.686h7.335v.065l-2.061 2.296a.806.806 0 0 0-.319.786v16.15a.75.75 0 0 0 .319.759zm8.215-6.332v.065c0 4.01 2.07 5.62 4.497 5.62a5.105 5.105 0 0 0 4.777-2.894h.066c-.844 3.963-3.298 5.836-6.97 5.836-3.962 0-7.7-2.389-7.7-7.925 0-5.817 3.747-8.14 7.887-8.14 3.335 0 6.886 1.573 6.886 6.632v.806h-9.443zm0-.806h4.618v-.815c0-4.122-.852-5.218-2.136-5.218-1.555 0-2.5 1.64-2.5 6.033h.018z\"></path></svg></span><span class=\"u-textScreenReader\">Homepage</span></a>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "post_links_boolean = data_actions == 'open-post'\n",
    "open_post_links = all_links[post_links_boolean]\n",
    "open_post_links"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "oops so I forgot that we can't boolean index np arrays lol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 30 links with an open-post data-action\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<a class=\"link link--darken\" data-action=\"open-post\" data-action-source=\"preview-listing\" data-action-value=\"https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0\" href=\"https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0\"><time datetime=\"2015-06-29T20:54:07.674Z\">Jun 29, 2015</time></a>,\n",
       " <a data-action=\"open-post\" data-action-index=\"0\" data-action-source=\"search_post---------0\" data-action-value=\"https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0\" data-post-id=\"a894fea33efe\" href=\"https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0\"><section class=\"section section--body section--first section--last\"><div class=\"section-divider\"><hr class=\"section-divider\"/></div><div class=\"section-content\"><div class=\"section-inner sectionLayout--insetColumn\"><figure class=\"graf graf--figure graf--layoutCroppedHeightPreview graf--leading\" id=\"255b\" name=\"255b\"><div class=\"aspectRatioPlaceholder is-locked\"><div class=\"aspectRatioPlaceholder-fill\" style=\"padding-bottom: 30%;\"></div><img class=\"graf-image\" data-height=\"3744\" data-image-id=\"1*k1qL3EaDxS_T-L8JbX0HaQ.jpeg\" data-width=\"5616\" src=\"https://cdn-images-1.medium.com/fit/t/1600/480/1*k1qL3EaDxS_T-L8JbX0HaQ.jpeg\"/></div></figure><h2 class=\"graf graf--h2 graf-after--figure graf--title\" id=\"08ba\" name=\"08ba\">The Dirty Little Secrets About The Worst Coding Bootcamps Out There</h2><h3 class=\"graf graf--h3 graf-after--h2 graf--trailing\" id=\"0667\" name=\"0667\">9 out of 10 programs are outright…</h3></div></div></section></a>]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "open_post_links = []\n",
    "for link in all_links:\n",
    "    if link.get('data-action') == 'open-post':\n",
    "        open_post_links.append(link)\n",
    "print(\"There are \" + str(len(open_post_links)) + \" links with an open-post data-action\")\n",
    "open_post_links[0:2] #see the first few. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now again we want to extract just the url as a string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bs4.element.Tag"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_link = open_post_links[0]\n",
    "type(test_link)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0'"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now i'm gonna try various ways of getting stuff out\n",
    "print(type(test_link.get('href')))\n",
    "test_link.get('href')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Ken Mazaika',\n",
       " 'CTO | Co-founder @firehoseproject | Web developer, Ruby on Rails contributor and coding mentor',\n",
       " 'The Dirty Little Secrets About The Worst Coding Bootcamps Out There',\n",
       " '2015-06-29T20:54:07.674Z',\n",
       " 'The Dirty Little Secrets About The Worst Coding Bootcamps Out\\xa0There9 out of 10 programs are outright\\xa0scams.There is massive confusion in the marketplace today. Marketers and the media have brainwashed people into thinking that it’s a cakewalk getting a job paying six figures as a developer. All you need to do is sign up for any coding bootcamp, study for 8 weeks (~40 business days), and you’ll walk into your first job. With many programs, this is incredibly far from the truth.All of the largest coding bootcamps have a reputation among hiring managers for churning out developers who have the professional maturity of a teenager at a One Direction concert. After struggling in the job market, some alumni give up. Other alumni study on their own and after several months of perseverance are able to start applying for jobs.It’s not their fault. Here’s the hype that isn’t true that beginners are brainwashed to believe about coding bootcamps:Myth #1: All Coding Bootcamps Teach the Skills You Need to Get\\xa0HiredMaybe you haven’t heard what I’ve been screaming about: Fundamentals MatterWhen I look at the curriculum of most coding bootcamps, the largest programs out there skip teaching one minor thing: how to program.Instead, they focus on the latest trends, like reactive-backbones-for-angularstrap-5. I get it. Beginners think they need to know this stuff, even though they’d get further knowing the fundamentals. It’s something that helps sell students, rather than help students get where they need to be. Playing into beginners’ naivety instead of teaching them what they actually need to learn is what 99% of coding bootcamps that need to go out of business do.Coding bootcamps usually focus on teaching people how to use specific technologies. But many do a poor job of teaching you how to think through and solve complex problems and become a practitioner of the actual programming language. Many never teach you how to be an actual programmer.Learning how to think through complex problems and teach yourself new concepts on the fly is the only thing that matters. Becoming a self-sufficient developer who can figure out how to build out complex features is where it is at, friends. Please believe me, having a buzzword on your resume is so much less important.The number of “software developers” who have graduated from different programs, but are incapable of solving rudimentary coding challenges is astonishing.Myth #2: Getting Your First Job As a Programmer is\\xa0EasyIt’s not. It takes hustle. A lot of\\xa0it.The fact of the matter is the job market is saturated with a lot of people seeking out entry level positions\\u200a—\\u200amany of whom are not qualified.If you just graduated a coding bootcamp, on paper (your resume), you probably look just like the rest of the people who graduated. This means that resume-blasting is a highly ineffective way to get your first job, even if you actually do have chops.Since you look similar on paper to many other junior web developers, applying for jobs in the traditional sense will be a high-volume/low-yield experience. This means if you choose to use this tactic you should be applying to ~100 positions a week. From there you’ll probably land 4–8 interviews, and from that maybe 1 offer if you actually have skills. A quick math-check shows 99 no’s for 1 yes\\u200a—\\u200aquite a bit of rejection.If you don’t want to play an inefficient numbers game, I highly suggest you go out to your local community, build meaningful relationships (over the course of a month or two while you’re learning) and then ask your network for help when you’re ready. People often underestimate the importance of a network. It is important. It is everything. It takes work. And it takes time. But it is a highly effective way to get a job if you have skills.If you’re seeking out your first job as a web developer now, I highly suggest you watch this 40 minute video: Tactics a Firehose Graduate Used to Land His First Web Development Position.Myth #3: Two Weeks of Career Prep Will Prepare You For a Technical InterviewTechnical interviews are designed to cut through the veneer of applicants and assess “does this person actually have skills?”. You can put lipstick on a pig, but it only will take you so far.Ignoring the fundamentals of programming and then expecting to get the skills from a 2-week overview is the equivalent of the magic pill that will give you six-pack abs and allow you to eat pizza all day\\u200a—\\u200athere is no version of that, and believing in something like that is a failure in understanding how the world actually works.It’s long-term, put-in-the-work mentality and focusing on the fundamentals that actually matter that will help you get where you need to be. There is no substitute for that.Curious what the technical interview entails? I wrote this article that goes into detail about the process of technical interviews.Myth #4: Job Placement Networks Help\\xa0StudentsMany programs try to sell students the idea that job placement networks are built to get their students jobs. They’re not. Job placement networks are a way for coding bootcamps to monetize students who would be able to get jobs on their own.I’ve heard of a well-known program calling up an employer outside their network who hired one of their alumni (the student found the position on their own), and demanding they pay them thousands of dollars as a “recruiting fee”\\u200a—\\u200aeven though they weren’t involved in the hiring process at all.It’s unreal.Myth #5: You Can Trust Job Placement Rates That Are AdvertisedThey say there are Lies, Damned Lies and Statistics. Most of the statistics you read about job placement rates are grossly inflated by clever math nonsense.Many times, the metrics you see advertised on the company’s sites read like they apply across all graduates. It’s not uncommon for the statement to be cleverly worded to imply that that percent of graduates get jobs, but in fact it’s a small filtered pool of the best graduates. In statistics this practice is called selection bias.People doing the calculating have the ability to give highly misleading statistics. With the right selection bias, anything is possible. Here’s an example of how meaningless these numbers are.Say the first cohort of a coding bootcamp has a job placement rate of 90%. The second has a placement rate of 40%. First, it’s on a downward trajectory, so you’d probably expect the placement rate to be lower than 40% going forward. The program would be highly incentivized to advertise their job placement rate of 90%\\u200a—\\u200awhich is true if you just don’t take into account the second cohort which sucked for them, or the direction the program is going.Myth #6: Computer Science Degrees Don’t\\xa0MatterMost colleges take 4 years to graduate. Going through a traditional 4-year computer science program shows a certain amount of stick-to-it-iveness and demonstrates you’ve been thinking about coding and technology for a long time.A close friend of mine was looking for a job as a developer. He was good. Real good. I tried to help him out and I referred him to the VP of Engineering of a company that begged me for someone I knew who could fill the position. After I gave someone who trusted me an intro with a glowing recommendation, I got this response back:Now long-term, my friend got a job someplace else and things worked out for him, but the fact of the matter is there are certain people who will discriminate against candidates without a computer science degree. That’s just how the world works\\u200a—\\u200abut it is starting to change slowly.The story senior developers tell that goes, “I didn’t learn anything from my computer science degree\\u200a—\\u200ait’s totally useless” is more about them boosting their ego than helping people make informed decisions.What universities do a poor job of teaching is practical, applicable knowledge you can use on day 1 of your job. On the flip side, most (good) universities do a wonderful job of teaching complex CS topics that help hone problem-solving abilities and produce self-sufficient programmers.The good coding bootcamps out there will cover CS topics around algorithms and data structures, but 9 out of 10 coding bootcamps won’t cover these topics at all\\u200a—\\u200abecause these topics can be difficult to teach.If your coding bootcamp doesn’t cover these types of things, you should go all-in on learning algorithms and data structures on your own time.On the flip side— although I appreciate the value of a Computer Science degree tremendously\\u200a—\\u200ait’s less practical than ever to go to a university. Spending 4 years of your life\\u200a—\\u200agoing $100,000 into debt is a serious commitment.If you’re willing to put in serious time and energy into learning the skill and finding your first position, being self-taught (by this I mean not having a CS degree) is a fine way to break into the industry.Most hiring managers are more interested in the years of experience you have coding in the real world rather than what you studied in college. And once you have a couple years of experience under your belt, however you got to where you are, you’ll be in high demand.When you’re starting out, it’s hard because you have to hustle to get your first job. After you’ve been working for a year or so, the tables will start to turn and you’ll start getting unsolicited emails from recruiters out of the blue trying to hire you. Getting 10–20 emails from recruiters trying to hire you each month is so common\\u200a—\\u200amost seasoned developers spend more time ridiculing recruiters than talking with them! [The Last Email Thread I’ve Been on Ridiculing Recruiters]The fact is\\u200a—\\u200asome high-growth tech companies are\\xa0screwed!Talent capital of experienced developers is hard to find! Companies that raise millions of dollars are in a position where they need to spend that money\\u200a—\\u200aand usually the asset they value most is technical experience.Many companies are in the position where they need to grow their engineering team by 20+ members. You might not appreciate how impossible this task is.Finding a good senior developer, who is located in your city, and convincing them to join your team, is like finding a a diamond the size of a refrigerator in your backyard. Finding 20 is like winning the lottery twice in a row.Add on top of it that most technical recruiters barely know anything about technology or what the buzzwords they talk about all day mean. This is what recruiters think programming life is like:It’s never been more practical to transition careers and become a software developer. Even though it takes a bit of work to get your first job, once you break into the industry, writing software is a rewarding craft. Once you have a track-record of putting the work in and solid experience to speak from, you’ll be in a great spot.This is why I co-founded theFirehoseProject\\u200a—\\u200ato help students transition into full-time web developers, who can solve complex problems, write algorithms and use the latest technologies.Let me just say things how they are. The world’s largest coding bootcamps only care about churning out students (and aren’t driven by their students’ results)\\u200a—\\u200aand many of them have a board of directors that will fire the CEO if they don’t close enough sales. They focus on volume and it’s the only metric they care about.Most coding bootcamps are not playing the long game. They focus on the short-term goal of closing a sale instead of the long-term goal of producing employable engineers. This means in 9 out of 10 programs the curriculum and instructors are a mere after-thought.This means you can sign up and pay without having any experience or knowing if the craft of coding is even for you. The fact of the matter is programming isn’t for everyone and any coding bootcamp that allows you to pay without proving you’re capable of programming by solving specific coding challenges doesn’t give a shit about student outcomes. Period. End of story.The low bar that is set by the worst programs out there is ruining the reputation of all coding bootcamps!As soon as a hiring manager interviews a couple candidates from these low-quality courses they immediately discriminate against all the coding bootcamps that exist. These programs are ruining things for all entry-level programmers.If you’re considering joining a program, I highly suggest you do your research and make sure the program you choose covers algorithms and data structures if you’re looking to transition careers. Otherwise, you’ll face a lot of questions you don’t understand in the job interview process.If you liked this post, it would mean a lot to me if you press the recommend button\\xa0below!Published in Techspiration + Ideas + Making It\\xa0Happen.']"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_url = test_link.get('href')\n",
    "get_all_article_info(test_url)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ok wwow so this worked?? Why didn't my thing earlier work.\n",
    "Ok lets see if I can call it on multiple at once"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ken Mazaika\n",
      "Ken Mazaika\n",
      "Ken Mazaika\n"
     ]
    }
   ],
   "source": [
    "for link in open_post_links[0:3]:\n",
    "    print(get_all_article_info(link.get('href'))[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "hmm I think this is the repeated link issu e- there are multiple things ona page that linkto the post"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ken Mazaika\n",
      "Ken Mazaika\n",
      "Ken Mazaika\n",
      "Quincy Larson\n",
      "Quincy Larson\n",
      "Quincy Larson\n"
     ]
    }
   ],
   "source": [
    "for link in open_post_links[0:6]:\n",
    "    print(get_all_article_info(link.get('href'))[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ok now I am going to see if I can find a more efficient way of looking for correct links:\n",
    "https://www.crummy.com/software/BeautifulSoup/bs4/doc/ the docs under the heading \"a function\" says you can pass custom functions to find all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def href_open_post_data_action(tag):\n",
    "    return tag.has_attr('href') and tag.get('data-action') == 'open-post'\n",
    "href_open_post_data_action(open_post_links[0]) #True\n",
    "href_open_post_data_action(all_links[0]) #False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<a class=\"link link--darken\" data-action=\"open-post\" data-action-source=\"preview-listing\" data-action-value=\"https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0\" href=\"https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0\"><time datetime=\"2015-06-29T20:54:07.674Z\">Jun 29, 2015</time></a>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "faster_links = bootcamp_list_parsed_html.find_all(href_open_post_data_action)\n",
    "faster_links[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "whoo we got a much faster way to get links!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-36-b8b473adb5f6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpost_information_all\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mget_all_article_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlink\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'href'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mlink\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfaster_links\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpost_information_all\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-36-b8b473adb5f6>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpost_information_all\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mget_all_article_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlink\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'href'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mlink\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfaster_links\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpost_information_all\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-16-0582db50a1e1>\u001b[0m in \u001b[0;36mget_all_article_info\u001b[0;34m(article_url)\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0mparsed_html\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBeautifulSoup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mraw_html\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'html.parser'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m     \u001b[0mauthor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_author\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m     \u001b[0mauthor_bio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_author_bio\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m     \u001b[0mtitle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0mdate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_raw_publish_date\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-16-0582db50a1e1>\u001b[0m in \u001b[0;36mget_author_bio\u001b[0;34m(parsed_html)\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0mthe\u001b[0m \u001b[0mauthor\u001b[0m \u001b[0mbio\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mdescription\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0ma\u001b[0m \u001b[0mstring\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \"\"\"\n\u001b[0;32m---> 17\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mparsed_html\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind_all\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'div'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"ui-caption ui-xs-clamp2 postMetaInline\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mget_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "post_information_all = [get_all_article_info(link.get('href')) for link in faster_links]\n",
    "len(post_information_all)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ok we see from this that there's an issue with my get author_bio function - it looks like one of the stories doesn't have that html element that denotes the author bio so I will have to do some debugging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-37-7fc1604ad9a4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mcount\u001b[0m \u001b[0;34m+=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0mget_all_article_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlink\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'href'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-16-0582db50a1e1>\u001b[0m in \u001b[0;36mget_all_article_info\u001b[0;34m(article_url)\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0mparsed_html\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBeautifulSoup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mraw_html\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'html.parser'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m     \u001b[0mauthor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_author\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m     \u001b[0mauthor_bio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_author_bio\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m     \u001b[0mtitle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0mdate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_raw_publish_date\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-16-0582db50a1e1>\u001b[0m in \u001b[0;36mget_author_bio\u001b[0;34m(parsed_html)\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0mthe\u001b[0m \u001b[0mauthor\u001b[0m \u001b[0mbio\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mdescription\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0ma\u001b[0m \u001b[0mstring\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \"\"\"\n\u001b[0;32m---> 17\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mparsed_html\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind_all\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'div'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"ui-caption ui-xs-clamp2 postMetaInline\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mget_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "count = 0\n",
    "for link in faster_links:\n",
    "    print(count)\n",
    "    count +=1\n",
    "    get_all_article_info(link.get('href'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-38-6a890104c7c6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0msixth_link\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfaster_links\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mseventh_link\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfaster_links\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mget_all_article_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msixth_link\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'href'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-16-0582db50a1e1>\u001b[0m in \u001b[0;36mget_all_article_info\u001b[0;34m(article_url)\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0mparsed_html\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBeautifulSoup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mraw_html\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'html.parser'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m     \u001b[0mauthor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_author\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m     \u001b[0mauthor_bio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_author_bio\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m     \u001b[0mtitle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0mdate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_raw_publish_date\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-16-0582db50a1e1>\u001b[0m in \u001b[0;36mget_author_bio\u001b[0;34m(parsed_html)\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0mthe\u001b[0m \u001b[0mauthor\u001b[0m \u001b[0mbio\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mdescription\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0ma\u001b[0m \u001b[0mstring\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \"\"\"\n\u001b[0;32m---> 17\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mparsed_html\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind_all\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'div'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"ui-caption ui-xs-clamp2 postMetaInline\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mget_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_html\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "sixth_link = faster_links[6]\n",
    "seventh_link = faster_links[7]\n",
    "get_all_article_info(sixth_link.get('href'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'https://medium.com/@choxi/lies-damned-lies-and-statistics-coding-bootcamps-and-the-authenticity-of-placement-rates-582880fea984?source=search_post---------2'"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sixth_link.get('href')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Investigating this link I see that the author doesn't have a bio, so I need to modify my functions to account for that."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_author_bio(parsed_html):\n",
    "    \"\"\"Parses the author's bio/description from a Medium article. \n",
    "    Arguments:\n",
    "        parsed_html: object returned by calling `BeautifulSoup(raw_html, 'html.parser')`\n",
    "    Returns: \n",
    "        the author bio/description as a string if it exists, and None otherwise\n",
    "    \"\"\"\n",
    "    bios = parsed_html.find_all('div', class_=\"ui-caption ui-xs-clamp2 postMetaInline\")\n",
    "    # If bios is empty, that means there is no author bio for article, and the [0]  will error so we need to explicityly\n",
    "    # check and return None if no author bio\n",
    "    return bios[0].text if bios else None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Roshan Choxi',\n",
       " None,\n",
       " 'Lies, Damned Lies, and Statistics: Coding Bootcamps and the Authenticity of Placement Rates',\n",
       " '2015-11-24T00:56:14.555Z',\n",
       " 'Lies, Damned Lies, and Statistics: Coding Bootcamps and the Authenticity of Placement RatesAUTHENTICITYWe’ve never formalized our core values at Bloc, but if you surveyed our employees you would probably see authenticity in the top three most cited responses\\u200a—\\u200afollowed closely by swag and batman. We’ll focus on authenticity today.Authenticity is a word that we use very specifically, and we don’t use it to mean the same thing as honesty or transparency. Richard Feynman describes it as “scientific integrity”:Last night I heard that Wesson Oil doesn’t soak through food. Well, that’s true. It’s not dishonest; but the thing I’m talking about is not just a matter of not being dishonest, it’s a matter of scientific integrity, which is another level. The fact that should be added to that advertising statement is that no oils soak through food, if operated at a certain temperature. If operated at another temperature, they all will\\u200a—\\u200aincluding Wesson Oil. So it’s the implication which has been conveyed, not the fact, which is true, and the difference is what we have to deal with.From: Cargo Cult ScienceThe easiest way I’ve found to articulate the difference is to explain it in the context of someone asking a question:Honesty is truthfully answering the question someone asked.Authenticity is truthfully answering the question someone intended to ask.Transparency is a bulk CSV export of your data.Here’s an example: when we raised our Series A investment last year, a few of my friends asked me if I was now a millionaire.An honest answer would be yes. On paper, if we had hypothetically raised a round with a post-money valuation over $5M and I owned at least 20% of the company I would have 20% x $5M = $1M ownership in a privately valued company and could technically be considered a millionaire.The authentic answer would be no, not even close. The question my friends intended to ask was “do you have a million dollars of liquid cash that you can spend to buy me a Tesla?” And the answer to that question is decidedly “no”, unless Elon would accept Bloc equity as cash.… AND STATISTICSThe developer bootcamp industry has an obsession with something called “the placement rate number”. It’s meant to measure a program’s efficacy by quantifying the percentage of graduates who successfully start careers as developers.Bloc is one of few programs that has never advertised a placement rate, and many bootcamps have removed their rates from their sites as well. Prospective students are eager to ask us for this statistic, and I don’t necessarily blame them given how appealing it is to use a simple benchmark to compare programs. We don’t publish a placement rate though as we believe it would potentially conflict with our commitment to authenticity, not because we lack confidence in the efficacy of our program.When a prospective student asks us “what is your placement rate?”, we could honestly say anywhere between 0–100% depending on how we qualify our answer. We could, today, say that 99% of our students find jobs after they graduate from Bloc in a way that is both technically honest and legally defensible, but not authentic or ethical. It’s not very difficult to game that statistic.99% of our “splorkdents” find “globs” within 90 days of “schmanuating”. Credit: SMBC\\xa0Comics.The truly authentic answer has nothing to do with statistics though. The question our students intend to ask is closer to “Does your program work?”, or more specifically “Will your program work for me?” We’ve found a better way to answer that question: our Software Engineering Track comes with a tuition reimbursement policy for students who are unable to find new careers in software development after graduating, and now our students don’t have to worry about landing on the wrong side of a program’s 90% placement rate.When there are programs with less than 20 grads touting a 100% placement rate and dozens of hidden qualifications, that number devolves from a transparent industry benchmark to a disingenuous marketing prop. While we look for authentic and quantifiable ways to evaluate program quality, I’ll encourage students to dig deeper: ask about the curriculum, background and experience of instructors, tuition and opportunity costs, and the hidden qualifications of these placement rate numbers.']"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_all_article_info(sixth_link.get('href'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SIDE TRACK**: Krista wants the publisher of each article so I will figure out how ot get that"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on inspecting several article's source html code, I can see that the publisher is found in the `<meta property=\"article:publisher\", content=\"https://www.facebook.come/codeburst\">`.  \n",
    "All of the \"content\" stuff is of the format _https://www.facebook.com/publisher_.   \n",
    "If the article isn't hosted on a \"company\" blog, then the publisher is just _medium_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#redefining article I'm working with for better readability\n",
    "with_pub_article_url = \"https://codeburst.io/7-things-i-learned-in-my-journey-from-coding-bootcamp-to-senior-developer-645ab7c2fea0\"\n",
    "without_pub_article_url = \"https://medium.com/@choxi/lies-damned-lies-and-statistics-coding-bootcamps-and-the-authenticity-of-placement-rates-582880fea984\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "with_pub_raw = simple_get(with_pub_article_url)\n",
    "with_pub_parsed_html = BeautifulSoup(raw_html, 'html.parser')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'freecodecamp'"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "long = with_pub_parsed_html.find(\"meta\", property='article:publisher')['content']\n",
    "long.split(\"/\")[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_article_publisher(parsed_html):\n",
    "    \"\"\"Parses the article's publisher from a Medium article. \n",
    "    Arguments:\n",
    "        parsed_html: object returned by calling `BeautifulSoup(raw_html, 'html.parser')`\n",
    "    Notes:\n",
    "        The publisher is encoded as \"https://facebook.com/publisher\" so I extract just the publisher name.\n",
    "        Not all articles have a verified publisher - like if it's just the author's personal blog - so publisher is\n",
    "        just \"medium\" in that case\n",
    "    Returns:\n",
    "        If article is hosted on verified publisher, returns publisher name as string\n",
    "        If article is on personal blog, returns \"medium\" as a string. \n",
    "        \n",
    "    \"\"\"\n",
    "    long_publisher = parsed_html.find(\"meta\", property='article:publisher')['content']\n",
    "    return long_publisher.split(\"/\")[3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**links in a page function***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_all_open_post_links(parsed_html):\n",
    "    def href_open_post_data_action(tag):\n",
    "        return tag.has_attr('href') and tag.get('data-action') == 'open-post'\n",
    "    link_objects =  parsed_html.find_all(href_open_post_data_action)\n",
    "    return [link.get('href') for link in link_objects] #retrieves the string url from link object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0',\n",
       " 'https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0',\n",
       " 'https://medium.com/techspiration-ideas-making-it-happen/the-dirty-little-secrets-about-the-worst-coding-bootcamps-out-there-a894fea33efe?source=search_post---------0',\n",
       " 'https://medium.freecodecamp.org/code-briefing-yes-there-are-completely-free-coding-bootcamps-dcfebc05d530?source=search_post---------1',\n",
       " 'https://medium.freecodecamp.org/code-briefing-yes-there-are-completely-free-coding-bootcamps-dcfebc05d530?source=search_post---------1',\n",
       " 'https://medium.freecodecamp.org/code-briefing-yes-there-are-completely-free-coding-bootcamps-dcfebc05d530?source=search_post---------1',\n",
       " 'https://medium.com/@choxi/lies-damned-lies-and-statistics-coding-bootcamps-and-the-authenticity-of-placement-rates-582880fea984?source=search_post---------2',\n",
       " 'https://medium.com/@choxi/lies-damned-lies-and-statistics-coding-bootcamps-and-the-authenticity-of-placement-rates-582880fea984?source=search_post---------2',\n",
       " 'https://medium.com/@choxi/lies-damned-lies-and-statistics-coding-bootcamps-and-the-authenticity-of-placement-rates-582880fea984?source=search_post---------2',\n",
       " 'https://educationfuturism.com/coding-bootcamps-and-the-new-for-profit-higher-ed-dbcd463e89ec?source=search_post---------3',\n",
       " 'https://educationfuturism.com/coding-bootcamps-and-the-new-for-profit-higher-ed-dbcd463e89ec?source=search_post---------3',\n",
       " 'https://educationfuturism.com/coding-bootcamps-and-the-new-for-profit-higher-ed-dbcd463e89ec?source=search_post---------3',\n",
       " 'https://medium.com/@devbootcamp/coding-bootcamps-2015-year-in-review-and-2016-predictions-8f278e711542?source=search_post---------4',\n",
       " 'https://medium.com/@devbootcamp/coding-bootcamps-2015-year-in-review-and-2016-predictions-8f278e711542?source=search_post---------4',\n",
       " 'https://medium.com/@devbootcamp/coding-bootcamps-2015-year-in-review-and-2016-predictions-8f278e711542?source=search_post---------4',\n",
       " 'https://code.likeagirl.io/are-coding-bootcamps-worth-it-eff5112b8ec8?source=search_post---------5',\n",
       " 'https://code.likeagirl.io/are-coding-bootcamps-worth-it-eff5112b8ec8?source=search_post---------5',\n",
       " 'https://code.likeagirl.io/are-coding-bootcamps-worth-it-eff5112b8ec8?source=search_post---------5',\n",
       " 'https://medium.com/@kenmazaika/23-things-aspiring-developers-should-know-about-online-coding-bootcamps-83d90b99abea?source=search_post---------6',\n",
       " 'https://medium.com/@kenmazaika/23-things-aspiring-developers-should-know-about-online-coding-bootcamps-83d90b99abea?source=search_post---------6',\n",
       " 'https://medium.com/@kenmazaika/23-things-aspiring-developers-should-know-about-online-coding-bootcamps-83d90b99abea?source=search_post---------6',\n",
       " 'https://blog.sabio.la/ucla-and-uci-extension-coding-bootcamps-arent-really-bootcamps-a3b847777e14?source=search_post---------7',\n",
       " 'https://blog.sabio.la/ucla-and-uci-extension-coding-bootcamps-arent-really-bootcamps-a3b847777e14?source=search_post---------7',\n",
       " 'https://blog.sabio.la/ucla-and-uci-extension-coding-bootcamps-arent-really-bootcamps-a3b847777e14?source=search_post---------7',\n",
       " 'https://medium.com/@hackupstate/the-most-important-questions-about-coding-bootcamps-beea11b914e0?source=search_post---------8',\n",
       " 'https://medium.com/@hackupstate/the-most-important-questions-about-coding-bootcamps-beea11b914e0?source=search_post---------8',\n",
       " 'https://medium.com/@hackupstate/the-most-important-questions-about-coding-bootcamps-beea11b914e0?source=search_post---------8',\n",
       " 'https://medium.com/@hackreactor/a-deep-dive-into-the-roi-of-coding-bootcamps-e83ad2d4a18b?source=search_post---------9',\n",
       " 'https://medium.com/@hackreactor/a-deep-dive-into-the-roi-of-coding-bootcamps-e83ad2d4a18b?source=search_post---------9',\n",
       " 'https://medium.com/@hackreactor/a-deep-dive-into-the-roi-of-coding-bootcamps-e83ad2d4a18b?source=search_post---------9']"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_all_open_post_links(bootcamp_list_parsed_html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Archive parsing\n",
    "Since we are interested in getting stories from the archive I am no longer working with the \"story\" page returned by searching \"coding bootcamp\" and instead I will try and scrape the archive of the \"coding bootcamp\" tag. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is the main page: https://medium.com/tag/codingbootcamp/archive  \n",
    "Tasks:\n",
    "1) Make sure can get information from articles linked\n",
    "2) How can I write a function that visits each month and each year \"pages\" and scrapes article info from there?\n",
    "3) How can I ensure to capture the month and year when scraping articles? \n",
    "    * but is that even neccessary since I am getting the published date from each article already?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**First test**: Can I get the links of the top 10 articles of all time?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "main_archive_url = \"https://medium.com/tag/codingbootcamp/archive\"\n",
    "main_archive_raw = simple_get(main_archive_url)\n",
    "main_archive_parsed = BeautifulSoup(main_archive_raw, 'html.parser')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "main_links = get_all_open_post_links(main_archive_parsed)\n",
    "unique_main_links = list(set(main_links))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "big_lst_article_info = []\n",
    "for link in unique_main_links:\n",
    "    big_lst_article_info.append(get_all_article_info(link))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Damn I gotta modify the function again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-51-e7547ec2a24e>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-51-e7547ec2a24e>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    bios =\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def get_author_bio(parsed_html):\n",
    "    bios = "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Iterate over all Dates in Archive"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The third \"outer\" level function we need for parsing will iterate through each page in the `coding bootcamp` archive, use the `get_all_open_post_links` function to get all the article links for say Jan 02 2018, and then `get_all_open_post_links` will call the `get_all_article_info` function on each article link to extract the information from each article."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But what is the pattern between dates and urls? \n",
    "The base url is: https://medium.com/tag/codingbootcamp/archive  \n",
    "The 2013 url is: https://medium.com/tag/codingbootcamp/archive/2013  \n",
    "But there are no more subfolders after that. \n",
    "But this is the url for January of 2015 is https://medium.com/tag/codingbootcamp/archive/2015/01\n",
    "but 2013 didn't have that.  \n",
    "But this is the url for Feburary 02 2016 https://medium.com/tag/codingbootcamp/archive/2016/02/02  \n",
    "But the previous urls didn't go as far as a date.   \n",
    "But not every day is covered.   \n",
    "So do we just iterate over all possible combinations ? What happens if we try to access a url that doesn't exist?\n",
    "Will we just accidently exxtract the same article information again?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First I'm just gonna play around with some stuff and then I will put it all into a function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "years = range(2013, 2019)\n",
    "months_w_o_zero_in_front = range(1, 13)\n",
    "days_w_o_zero = range(1, 32)\n",
    "base_url = \"https://medium.com/tag/codingbootcamp/archive\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "def format_dates_for_url(integer_date):\n",
    "    if integer_date < 10:\n",
    "        return str(0) + str(integer_date)\n",
    "    else:\n",
    "        return str(integer_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'https://medium.com/tag/codingbootcamp/archive/2013'"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_url + '/' + format_dates_for_url(2013)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Test getting links from the base_url/2013 link. Should get two links back\n",
    "archive_raw_2013 = simple_get(base_url + \"/\" + format_dates_for_url(2013))\n",
    "archive_parsed_2013 = BeautifulSoup(archive_raw_2013, 'html.parser')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['https://medium.com/hackeryou-college-of-technology/life-lessons-from-three-shopify-execs-8be89b5eaaf8?source=tag_archive---------0---------------------',\n",
       " 'https://medium.com/hackeryou-college-of-technology/life-lessons-from-three-shopify-execs-8be89b5eaaf8?source=tag_archive---------0---------------------',\n",
       " 'https://medium.com/hackeryou-college-of-technology/summer-academy-ruby-on-rails-project-showcase-8ba30b5b2efe?source=tag_archive---------1---------------------',\n",
       " 'https://medium.com/hackeryou-college-of-technology/summer-academy-ruby-on-rails-project-showcase-8ba30b5b2efe?source=tag_archive---------1---------------------']"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_all_open_post_links(archive_parsed_2013)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yay that worked!! Ok what happens if I try to search for a specific date page that doesn't exist in 2013?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['https://medium.com/hackeryou-college-of-technology/life-lessons-from-three-shopify-execs-8be89b5eaaf8?source=tag_archive---------0---------------------',\n",
       " 'https://medium.com/hackeryou-college-of-technology/life-lessons-from-three-shopify-execs-8be89b5eaaf8?source=tag_archive---------0---------------------',\n",
       " 'https://medium.com/hackeryou-college-of-technology/summer-academy-ruby-on-rails-project-showcase-8ba30b5b2efe?source=tag_archive---------1---------------------',\n",
       " 'https://medium.com/hackeryou-college-of-technology/summer-academy-ruby-on-rails-project-showcase-8ba30b5b2efe?source=tag_archive---------1---------------------']"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_2013_month_url = base_url + \"/\" + format_dates_for_url(2013) + \"/\" + format_dates_for_url(9) + \"/\" + format_dates_for_url(29)\n",
    "archive_raw_2013_09_29 = simple_get(test_2013_month_url)\n",
    "archive_parsed_2013_09_29 = BeautifulSoup(archive_raw_2013_09_29, 'html.parser')\n",
    "get_all_open_post_links(archive_parsed_2013_09_29)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ok so just gives me the same thing... I wonder if there is a way to tell if a webpage redirects you bc a url doesn't exists"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "also as a note on duplicates - I might just add it to a set to get rid of them - horrible runtime but...."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'https://medium.com/hackeryou-college-of-technology/life-lessons-from-three-shopify-execs-8be89b5eaaf8?source=tag_archive---------0---------------------',\n",
       " 'https://medium.com/hackeryou-college-of-technology/summer-academy-ruby-on-rails-project-showcase-8ba30b5b2efe?source=tag_archive---------1---------------------'}"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url_set = set()\n",
    "count = 0\n",
    "for day in days_w_o_zero:\n",
    "    count +=1 \n",
    "    if count >10:\n",
    "        break\n",
    "    url = base_url + \"/\" + str(2013) + \"/\" + str(10) + \"/\" + format_dates_for_url(day)\n",
    "    raw_html = simple_get(url)\n",
    "    parsed_html = BeautifulSoup(raw_html, 'html.parser')\n",
    "    links = get_all_open_post_links(parsed_html)\n",
    "    url_set.update(links) #adds links to set but not if they are already there\n",
    "url_set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ok so the above thing took about 10 seconds to run for only 10 urls which isn't great so I think what I want to do is get a list of all the urls, with many duplicates, and then call set on it once to get rid of the duplicates."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "also thinking I want to figure out a way to tell if a webpage in achrive doesn't exist (for example there is no 2013/02/10 page) and then to not parse the \"redirected\" page (bc if it doesn't exist it directs to further up the date heierarchy) because else that results in a TON of redundant parsing and makes this take too long.   \n",
    "Since 2013 has only two articles, it only has a base/2013 url, so any attempts to go to a finer date redirects there - is that the same for the other years that have more stories?  \n",
    "After some tests, if you attempt to access a month that doesn't exist, like base/2015/04, it redirects you to the year (base/2015).  \n",
    "If you attempt to access a day that doesn't exist,but the month does, then it redirects you to the month (base/2015/05).  \n",
    "If you attempt to access a day and month that don't exist, then you are redirected to the year (base/2015).  \n",
    "This will be a useful pattern to exploit. My idea is to attempt to acccess the url, but if I check and the resulting url is not what I wanted (ie I was redirected), then I want to not parse the redirected page ( because I already did). But how to check that?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "#rewriting simple get to check for redirects\n",
    "def redirect_get_1(url):\n",
    "    try:\n",
    "        with closing(get(url, stream=True)) as resp: #closing ensures any network resources are freed when out of scope - good practice\n",
    "            return resp.status_code\n",
    "\n",
    "    except RequestException as e:\n",
    "        log_error('Error during requests to {0} : {1}'.format(url, str(e)))\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#This url is 2013/09/29 which doesn't exist\n",
    "redirect_get_1(test_2013_month_url)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ok so we can't check status code directly for a bad url because in the end it returns the \"OK\" status code. \n",
    "\n",
    "But after looking through the documentation for a response object (http://docs.python-requests.org/en/v0.10.6/api/) I found that a response object has a history attribute so I checked that:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#rewriting simple get to check for redirects\n",
    "def redirect_get_2(url):\n",
    "    try:\n",
    "        with closing(get(url, stream=True)) as resp: #closing ensures any network resources are freed when out of scope - good practice\n",
    "            return resp.history # check history\n",
    "\n",
    "    except RequestException as e:\n",
    "        log_error('Error during requests to {0} : {1}'.format(url, str(e)))\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<Response [302]>, <Response [302]>]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "redirect_get_2(test_2013_month_url)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A 302 status code is a way to indicate some kind of redirect - and a good url doesn't have any 302 history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "good_url = base_url + \"/\" + str(2013)\n",
    "redirect_get_2(good_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# lets test another good ulr\n",
    "good_url_2 = base_url + \"/\" + str(2015) + format_dates_for_url(1)\n",
    "redirect_get_2(good_url_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There's always a chance that a link will have a history that isn't a redirect to have more robust code I want to check to see if I can explicity check the type of history for 302"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "302"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bad_history = redirect_get_2(test_2013_month_url)\n",
    "bad_history[0].status_code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rewrite the simple get function to check this\n",
    "def simple_get(url):\n",
    "    \"\"\"\n",
    "    Attempts to get the content at `url` by making an HTTP GET request.\n",
    "    If the content-type of response is some kind of HTML/XML, return the\n",
    "    text content, otherwise return None.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        with closing(get(url, stream=True)) as resp: #closing ensures any network resources are freed when out of scope - good practice\n",
    "            if is_redirect(resp):\n",
    "                return \"redirect\"\n",
    "            elif is_good_response(resp):\n",
    "                return resp.content\n",
    "            else:\n",
    "                return None\n",
    "\n",
    "    except RequestException as e:\n",
    "        log_error('Error during requests to {0} : {1}'.format(url, str(e)))\n",
    "        return None\n",
    "    \n",
    "def is_redirect(resp):\n",
    "    resp_history = resp.history\n",
    "    if resp_history: #not empty\n",
    "        statuses = [h.status_code==302 for h in resp_history]\n",
    "        return np.any(statuses)\n",
    "    else:\n",
    "        return False\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'redirect'"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simple_get(test_2013_month_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Ok lets test this redirect while collecting some urls\n",
    "stories = []\n",
    "num_redirects = 0\n",
    "for day in days_w_o_zero[0:10]:\n",
    "    url = base_url + \"/\" + str(2013) + \"/\" + str(10) + \"/\" + format_dates_for_url(day)\n",
    "    raw_html = simple_get(url)\n",
    "    if raw_html == \"redirect\":\n",
    "        num_redirects +=1 \n",
    "    else:\n",
    "        parsed_html = BeautifulSoup(raw_html, 'html.parser')\n",
    "        links = get_all_open_post_links(parsed_html)\n",
    "        stories.extend(links) #use extend instead of append bc just want to add elements, not create nested list\n",
    "stories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_redirects"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ok there is a kink in my plan - if the archive only has the year url (like base_url/2013, base_url/2014), then my above function will never collect any values - so like I might just write my function such that if the year is 2013 ro 2014, it just doesn't bother going into the smaller dates - just extra code. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_specific_Codingbootcamp_links():\n",
    "    years = range(2013, 2019)\n",
    "    months_w_o_zero_in_front = range(1, 13)\n",
    "    days_w_o_zero = range(1, 32)\n",
    "    base_url = \"https://medium.com/tag/codingbootcamp/archive\"\n",
    "    story_links = []\n",
    "    for year in years:\n",
    "        if year == 2013 or year == 2014:\n",
    "            url = base_url + \"/\" + format_dates_for_url(year)\n",
    "            raw_year_html = simple_get(url)\n",
    "            parsed_year_html = BeautifulSoup(raw_year_html, 'html.parser')\n",
    "            links = get_all_open_post_links(parsed_year_html)\n",
    "            #use extend instead of append bc just want to add elements, not create nested list\n",
    "            story_links.extend(links) \n",
    "        else:\n",
    "            for month in months_w_o_zero_in_front:\n",
    "                for day in days_w_o_zero:\n",
    "                    url = base_url + \"/\" + format_dates_for_url(year) + format_dates_for_url(month) + \"/\" + format_dates_for_url(day)\n",
    "                    raw_day_html = simple_get(url)\n",
    "                    if raw_day_html == \"redirect\":\n",
    "                        break\n",
    "                    parsed_day_html = BeautifulSoup(raw_day_html, 'html.parser')\n",
    "                    links = get_all_open_post_links(parsed_day_html)\n",
    "                    story_links.extend(links)\n",
    "    return list(set(story_links))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "story_links = get_specific_coding_bootcamp_links()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above: Started at 12:43 pm finished at 12:47 pm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "story_links"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   A  B  C\n",
       "0  1  2  3\n",
       "1  4  5  6\n",
       "2  7  8  9"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "test_df = pd.DataFrame(test_nested_list, columns = ['A','B', 'C'])\n",
    "test_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "story_info_list = []\n",
    "for url in story_links:\n",
    "    story_info_list.append(get_all_article_info(url))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "column_names = [\"author\", \"author_bio\", \"title\", \"date\", \"publisher\", \"text\"]\n",
    "Codingbootcamp_info = pd.DataFrame(story_info_list, columns = column_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>author</th>\n",
       "      <th>author_bio</th>\n",
       "      <th>title</th>\n",
       "      <th>date</th>\n",
       "      <th>publisher</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Clifford Armstrong III</td>\n",
       "      <td>None</td>\n",
       "      <td>How I’m faking it till I make it. – Clifford A...</td>\n",
       "      <td>2018-08-31T01:43:41.476Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>How I’m faking it till I make it.One of the co...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Turing School</td>\n",
       "      <td>This account is now inactive. For the latest f...</td>\n",
       "      <td>Fear Has No Place Here – Turing School – Medium</td>\n",
       "      <td>2017-02-03T13:47:00.584Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Fear Has No Place Hereby Jeff CasimirWe’re les...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Techloy Reporter</td>\n",
       "      <td>Covering news and reviews about startups, apps...</td>\n",
       "      <td>This boot camp organised by Fidelity Bank will...</td>\n",
       "      <td>2018-04-03T04:12:09.677Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>This boot camp organised by Fidelity Bank will...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mike Brave</td>\n",
       "      <td>I make things with design and code. Here's to ...</td>\n",
       "      <td>42 Piscine Day 16 — (11) – Mike Brave – Medium</td>\n",
       "      <td>2018-09-05T05:02:51.228Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>42 Piscine Day 16 — (11)Edit: This is part of ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Calvin Lin</td>\n",
       "      <td>Programming &amp; Productivity Enthusiast</td>\n",
       "      <td>My Experience at FullStack Academy Thus Far – ...</td>\n",
       "      <td>2017-07-28T02:40:51.876Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>My Experience at FullStack Academy Thus FarAs ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>conshus</td>\n",
       "      <td>the Black MacGyver | @OURshow (Sat 5-7pm WPRK ...</td>\n",
       "      <td>Day 37 — Meowpurrdy – conshus – Medium</td>\n",
       "      <td>2017-05-02T12:09:22.962Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Day 37 — Meowpurrdyliner notes:So yesterday, w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>adam tropp</td>\n",
       "      <td>None</td>\n",
       "      <td>CS 100.2: Big O – adam tropp – Medium</td>\n",
       "      <td>2018-05-16T21:38:09.304Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>CS 100.2: Big OOkay, so I know I said that in ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Adam Belton</td>\n",
       "      <td>I'm a Canadian masquerading as a Brit so I can...</td>\n",
       "      <td>On Coding Bootcamps – Adam Belton – Medium</td>\n",
       "      <td>2018-05-27T10:28:22.105Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>On Coding BootcampsDuring the three months bet...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Re:Coded Team</td>\n",
       "      <td>We train conflict-affected youth to become the...</td>\n",
       "      <td>To our supporters, – Re:Coded – Medium</td>\n",
       "      <td>2018-03-02T08:00:00.000Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>To our supporters,Last week marked the graduat...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Anthony Jarina</td>\n",
       "      <td>None</td>\n",
       "      <td>The Bootcamp Bubble – Anthony Jarina – Medium</td>\n",
       "      <td>2017-07-20T18:10:32.432Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>The Bootcamp BubbleWith news that DevBootcamp ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Gus Kemenyfy</td>\n",
       "      <td>Software Engineering student at Suncoast Devel...</td>\n",
       "      <td>&lt;h1&gt;Computer jargon&lt;/h1&gt; – Gus Kemenyfy – Medium</td>\n",
       "      <td>2018-08-07T03:29:50.147Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>&lt;h1&gt;Computer jargon&lt;/h1&gt;Week 2 of my coding jo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Code Platoon</td>\n",
       "      <td>We transform #Veterans into software developer...</td>\n",
       "      <td>3 Paths (and resources) for Veterans Intereste...</td>\n",
       "      <td>2017-02-02T21:37:45.437Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>3 Paths (and Resources) for Veterans Intereste...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>David Clark</td>\n",
       "      <td>Mindfulness | Humans | Animals | Earth | Codin...</td>\n",
       "      <td>The Plan – L2Code – Medium</td>\n",
       "      <td>2018-03-04T00:12:47.996Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>The PlanOnward and Upward!Photo by SpaceXThe m...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Shaheedah</td>\n",
       "      <td>Techy. Writer at http://ezibota.com. Author of...</td>\n",
       "      <td>Why You Should Learn How To Code – Shaheedah –...</td>\n",
       "      <td>2018-05-08T10:08:05.256Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Why You Should Learn How To Code1. Schedule Fr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Jamie Gladfelter</td>\n",
       "      <td>economist, entrepreneur, developer, mentor for...</td>\n",
       "      <td>The Beginning. – Jamie Gladfelter – Medium</td>\n",
       "      <td>2017-10-02T22:12:10.995Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>The Beginning.With the building purchase compl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Chris Barfod</td>\n",
       "      <td>Creative programmer, Dvorak keyboard user, alw...</td>\n",
       "      <td>Hello, World! – Chris Barfod – Medium</td>\n",
       "      <td>2018-03-07T05:47:01.018Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Hello, World!Come with me on a journey through...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>William A. Mooney</td>\n",
       "      <td>Christ Centered Dev. || Developer || Blogger</td>\n",
       "      <td>6th Week — Vivixx Coding Bootcamp – William A....</td>\n",
       "      <td>2017-07-21T14:50:30.933Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>6th Week — Vivixx Coding BootcampVivixx Academ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>J.Lim</td>\n",
       "      <td>Learning JavaScript, Vue.js, Sass, Python, Dja...</td>\n",
       "      <td>JavaScript \"Call, Apply, Bind\" – J.Lim – Medium</td>\n",
       "      <td>2018-05-23T16:49:14.572Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>JavaScript “Call, Apply, Bind”JL’s Coding Boot...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Shoshana Rosenfield</td>\n",
       "      <td>Software Engineer student at the Grace Hopper ...</td>\n",
       "      <td>Here We Go… – Shoshana Rosenfield – Medium</td>\n",
       "      <td>2018-05-27T19:29:40.767Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Here We Go…I told myself that I could never bl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Holly Valenty</td>\n",
       "      <td>Full-Stack Developer and Tech Education Enthus...</td>\n",
       "      <td>The one about confidence. Or the lack thereof....</td>\n",
       "      <td>2018-03-21T03:46:05.315Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>The one about confidence. Or the lack thereof....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>KeepCoding</td>\n",
       "      <td>We create the best learning experience for Ful...</td>\n",
       "      <td>How to make sure a freelance job is legit – Ke...</td>\n",
       "      <td>2017-06-08T15:12:45.179Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>How to make sure a freelance job is legitThink...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Joseph Cardillo</td>\n",
       "      <td>Curious about everything. Literature, Fiction,...</td>\n",
       "      <td>JavaScript Functions For Dummies (Me): Part 1 ...</td>\n",
       "      <td>2018-04-01T10:56:50.624Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>JavaScript Functions For Dummies (Me): Part 1D...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>conshus</td>\n",
       "      <td>the Black MacGyver | @OURshow (Sat 5-7pm WPRK ...</td>\n",
       "      <td>Day 60 — Git Up, Git Out – conshus – Medium</td>\n",
       "      <td>2017-06-05T13:43:03.571Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Day 60 — Git Up, Git Outliner notes:Friday…we ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Clint Schmidt</td>\n",
       "      <td>Former CEO at Bloc. I build growth companies.</td>\n",
       "      <td>In-person Coding Bootcamps are Terrible Busine...</td>\n",
       "      <td>2017-07-13T08:14:10.466Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>In-person Coding Bootcamps are Terrible Busine...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>TJ Stubbs</td>\n",
       "      <td>Learning to code at General Assembly WDI</td>\n",
       "      <td>So You Think You Can Code? General Assembly Bo...</td>\n",
       "      <td>2017-12-04T03:07:13.474Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>So You Think You Can Code? General Assembly Bo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Le Wagon Montréal</td>\n",
       "      <td>Coding school for creative people &amp; entreprene...</td>\n",
       "      <td>Learning &amp; building: Following your passion as...</td>\n",
       "      <td>2018-09-05T16:41:35.031Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Learning &amp; building: Following your passion as...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Yan Fan</td>\n",
       "      <td>Co-Founder &amp; CTO of Code Chrysalis, a coding b...</td>\n",
       "      <td>Why JavaScript? – Code Chrysalis – Medium</td>\n",
       "      <td>2017-06-02T22:52:18.379Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Why JavaScript?“any application that can be wr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Mario Posadas</td>\n",
       "      <td>Ironhack Expansion Lead</td>\n",
       "      <td>How to boost your life in the biggest LatAm st...</td>\n",
       "      <td>2018-05-22T12:08:34.136Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>How to boost your life in the biggest LatAm st...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Ngoc Tina Hoang</td>\n",
       "      <td>None</td>\n",
       "      <td>Job Searching After Coding Boot Camp – Ngoc Ti...</td>\n",
       "      <td>2018-03-16T09:57:28.426Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Job Searching After Coding Boot CampFinding a ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1019</th>\n",
       "      <td>Hack Reactor</td>\n",
       "      <td>Providing the 21st century CS degree. We turn ...</td>\n",
       "      <td>Alumni Spotlight: Jeffrey Sun Empowers Others ...</td>\n",
       "      <td>2018-08-30T12:51:01.184Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Alumni Spotlight: Jeffrey Sun Empowers Others ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1020</th>\n",
       "      <td>Taylor Edwards</td>\n",
       "      <td>None</td>\n",
       "      <td>Learn JavaScript in One Day – Taylor Edwards –...</td>\n",
       "      <td>2018-04-06T17:14:58.391Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Learn JavaScript in One DayLet’s be real. Codi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1021</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1022</th>\n",
       "      <td>Emily Deans</td>\n",
       "      <td>Washington, D.C.-based web developer. Former c...</td>\n",
       "      <td>A Walk in the Park – Emily Deans – Medium</td>\n",
       "      <td>2017-08-09T21:41:00.990Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>A Walk in the ParkWe took a little detour from...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1023</th>\n",
       "      <td>Sam Kane</td>\n",
       "      <td>Full Stack Development Student at The Iron Yar...</td>\n",
       "      <td>Hello, World! – Sam Kane – Medium</td>\n",
       "      <td>2017-07-10T19:35:11.988Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Hello, World!My Path to a Coding BootcampTwelv...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1024</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1025</th>\n",
       "      <td>Anna Brown</td>\n",
       "      <td>Software engineer at @IFTTT, Alum of the Grace...</td>\n",
       "      <td>Becoming a software engineer at Grace Hopper A...</td>\n",
       "      <td>2017-01-05T21:32:56.358Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Becoming a software engineer at Grace Hopper A...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1026</th>\n",
       "      <td>Chris Lee</td>\n",
       "      <td>None</td>\n",
       "      <td>Can a 10–12 Week Coding Bootcamp Turn You Into...</td>\n",
       "      <td>2018-08-11T21:40:33.576Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Can a 10–12 Week Coding Bootcamp Turn You Into...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1027</th>\n",
       "      <td>Amber Wilkie</td>\n",
       "      <td>Software developer: Ruby (Rails), Javascript (...</td>\n",
       "      <td>Craft Academy: One Month of Bootcamp – Craft A...</td>\n",
       "      <td>2016-09-01T15:54:28.778Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Craft Academy: One Month of BootcampLots of pe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1028</th>\n",
       "      <td>Chance Taken</td>\n",
       "      <td>Facilitator @ Chingu. Apply here: chingu.io</td>\n",
       "      <td>Overheard in Chingu (Voyage launch remix) – Ch...</td>\n",
       "      <td>2017-07-24T12:17:38.930Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Overheard in Chingu (Voyage launch remix)Rando...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1029</th>\n",
       "      <td>Kyle Thayer</td>\n",
       "      <td>I am a PhD student studying  programming, cult...</td>\n",
       "      <td>Coding Bootcamps: Women Overcoming Intimidatio...</td>\n",
       "      <td>2018-08-11T00:20:38.208Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Coding Bootcamps: Women Overcoming Intimidatio...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1030</th>\n",
       "      <td>Mike Brave</td>\n",
       "      <td>I make things with design and code. Here's to ...</td>\n",
       "      <td>42 Piscine Day 8 — (05) – Mike Brave – Medium</td>\n",
       "      <td>2018-08-28T07:57:39.091Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>42 Piscine Day 8 — (05)Edit: This is part of a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1031</th>\n",
       "      <td>Kevin Ho</td>\n",
       "      <td>Software Engineer</td>\n",
       "      <td>How Fullstack Academy Prepared Me To Be a Soft...</td>\n",
       "      <td>2018-08-11T20:23:18.342Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>How Fullstack Academy Prepared Me To Be a Soft...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1032</th>\n",
       "      <td>Mike Brave</td>\n",
       "      <td>I make things with design and code. Here's to ...</td>\n",
       "      <td>42 Piscine Day 20 — (EvalExpr) – Mike Brave – ...</td>\n",
       "      <td>2018-09-09T02:22:45.751Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>42 Piscine Day 20 — (EvalExpr)Edit: This is pa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1033</th>\n",
       "      <td>Harrison Spain</td>\n",
       "      <td>I am a software development educator and entre...</td>\n",
       "      <td>Why ReactJS – Redwood Code Academy – Medium</td>\n",
       "      <td>2018-05-30T21:14:26.023Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Why ReactJS“Close-up of a laptop screen with l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1034</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1035</th>\n",
       "      <td>Haseeb Chaudhary</td>\n",
       "      <td>Cyber Security Architect https://www.linkedin....</td>\n",
       "      <td>The Beautiful Struggle – Haseeb Chaudhary – Me...</td>\n",
       "      <td>2018-07-08T08:42:33.881Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>The Beautiful StruggleIt’s been four months si...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1036</th>\n",
       "      <td>Abdoul Diallo</td>\n",
       "      <td>// Love. Learn. Code. Blog.</td>\n",
       "      <td>Internet != Google || Facebook || Instagram – ...</td>\n",
       "      <td>2018-05-16T18:04:46.255Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Internet != Google || Facebook || InstagramJus...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1037</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1038</th>\n",
       "      <td>Dan Byler</td>\n",
       "      <td>Martial artist, instructional designer, traine...</td>\n",
       "      <td>The joy of learning JavaScript – Dan Byler – M...</td>\n",
       "      <td>2018-03-01T19:03:13.942Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>The joy of learning JavaScriptLearning how to ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1039</th>\n",
       "      <td>conshus</td>\n",
       "      <td>the Black MacGyver | @OURshow (Sat 5-7pm WPRK ...</td>\n",
       "      <td>Day 45 - I'm so excited – conshus – Medium</td>\n",
       "      <td>2017-05-12T11:30:06.801Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Day 45 - I'm so excitedliner notes:Yesterday w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1040</th>\n",
       "      <td>Chance Taken</td>\n",
       "      <td>Facilitator @ Chingu. Apply here: chingu.io</td>\n",
       "      <td>Chingu Weekly Vol. 60 — VOYAGE-5 IS UPON US! –...</td>\n",
       "      <td>2018-05-28T18:20:02.021Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Chingu Weekly Vol. 60 — VOYAGE-5 IS UPON US!An...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1041</th>\n",
       "      <td>Holly Valenty</td>\n",
       "      <td>Full-Stack Developer and Tech Education Enthus...</td>\n",
       "      <td>Failing forward. – HollsMarie – Medium</td>\n",
       "      <td>2018-03-05T04:59:50.275Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Failing forward.First things first. I earned a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1042</th>\n",
       "      <td>chibueze ukaegbu</td>\n",
       "      <td>None</td>\n",
       "      <td>LearnFactory Internship: Day 10 – LearnFactory...</td>\n",
       "      <td>2018-05-12T04:59:22.824Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>LearnFactory Internship: Day 10“Without ambiti...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1043</th>\n",
       "      <td>Anthony Delgado</td>\n",
       "      <td>I’ve been a developer for over a decade. From ...</td>\n",
       "      <td>Anthony Delgado Interview in San Juan, Puerto ...</td>\n",
       "      <td>2018-07-02T04:15:46.421Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Anthony Delgado Interview in San Juan, Puerto ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1044</th>\n",
       "      <td>chibueze ukaegbu</td>\n",
       "      <td>None</td>\n",
       "      <td>LearnFactory Internship: Day 9 – LearnFactory ...</td>\n",
       "      <td>2018-05-12T04:08:50.081Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>LearnFactory Internship: Day 9Live to be satis...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1045</th>\n",
       "      <td>Jacob Moore</td>\n",
       "      <td>None</td>\n",
       "      <td>Day One — First Review – Jacob Moore – Medium</td>\n",
       "      <td>2017-07-17T16:49:44.442Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Day One — First ReviewSo far the most we have ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1046</th>\n",
       "      <td>Caleb Harnell</td>\n",
       "      <td>Coder Academy Fast-track student — https://www...</td>\n",
       "      <td>Extracting hash values from user input – Caleb...</td>\n",
       "      <td>2017-08-03T09:24:13.241Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Extracting hash values from user inputJust thr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1047</th>\n",
       "      <td>Code States</td>\n",
       "      <td>None</td>\n",
       "      <td>비전공자와 코딩 1 | 누구나 처음에는 비전공자였다. – Code States – ...</td>\n",
       "      <td>2018-05-21T03:38:17.827Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>비전공자와 코딩 1 | 누구나 처음에는 비전공자였다.비전공자도 할 수 있을까요?코딩...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048</th>\n",
       "      <td>Leibel Hecht</td>\n",
       "      <td>I’m Leibel. I’m transitioning from Talmud to T...</td>\n",
       "      <td>Weather Mood Booster App. Yay! I made an app 🤓...</td>\n",
       "      <td>2017-06-04T22:12:18.327Z</td>\n",
       "      <td>medium</td>\n",
       "      <td>Weather Mood Booster App. Yay! I made an app 🤓...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1049 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      author  \\\n",
       "0     Clifford Armstrong III   \n",
       "1              Turing School   \n",
       "2           Techloy Reporter   \n",
       "3                 Mike Brave   \n",
       "4                 Calvin Lin   \n",
       "5                    conshus   \n",
       "6                       None   \n",
       "7                 adam tropp   \n",
       "8                Adam Belton   \n",
       "9              Re:Coded Team   \n",
       "10            Anthony Jarina   \n",
       "11              Gus Kemenyfy   \n",
       "12              Code Platoon   \n",
       "13               David Clark   \n",
       "14                 Shaheedah   \n",
       "15          Jamie Gladfelter   \n",
       "16              Chris Barfod   \n",
       "17         William A. Mooney   \n",
       "18                     J.Lim   \n",
       "19       Shoshana Rosenfield   \n",
       "20             Holly Valenty   \n",
       "21                KeepCoding   \n",
       "22           Joseph Cardillo   \n",
       "23                   conshus   \n",
       "24             Clint Schmidt   \n",
       "25                 TJ Stubbs   \n",
       "26         Le Wagon Montréal   \n",
       "27                   Yan Fan   \n",
       "28             Mario Posadas   \n",
       "29           Ngoc Tina Hoang   \n",
       "...                      ...   \n",
       "1019            Hack Reactor   \n",
       "1020          Taylor Edwards   \n",
       "1021                    None   \n",
       "1022             Emily Deans   \n",
       "1023                Sam Kane   \n",
       "1024                    None   \n",
       "1025              Anna Brown   \n",
       "1026               Chris Lee   \n",
       "1027            Amber Wilkie   \n",
       "1028            Chance Taken   \n",
       "1029             Kyle Thayer   \n",
       "1030              Mike Brave   \n",
       "1031                Kevin Ho   \n",
       "1032              Mike Brave   \n",
       "1033          Harrison Spain   \n",
       "1034                    None   \n",
       "1035        Haseeb Chaudhary   \n",
       "1036           Abdoul Diallo   \n",
       "1037                    None   \n",
       "1038               Dan Byler   \n",
       "1039                 conshus   \n",
       "1040            Chance Taken   \n",
       "1041           Holly Valenty   \n",
       "1042        chibueze ukaegbu   \n",
       "1043         Anthony Delgado   \n",
       "1044        chibueze ukaegbu   \n",
       "1045             Jacob Moore   \n",
       "1046           Caleb Harnell   \n",
       "1047             Code States   \n",
       "1048            Leibel Hecht   \n",
       "\n",
       "                                             author_bio  \\\n",
       "0                                                  None   \n",
       "1     This account is now inactive. For the latest f...   \n",
       "2     Covering news and reviews about startups, apps...   \n",
       "3     I make things with design and code. Here's to ...   \n",
       "4                 Programming & Productivity Enthusiast   \n",
       "5     the Black MacGyver | @OURshow (Sat 5-7pm WPRK ...   \n",
       "6                                                  None   \n",
       "7                                                  None   \n",
       "8     I'm a Canadian masquerading as a Brit so I can...   \n",
       "9     We train conflict-affected youth to become the...   \n",
       "10                                                 None   \n",
       "11    Software Engineering student at Suncoast Devel...   \n",
       "12    We transform #Veterans into software developer...   \n",
       "13    Mindfulness | Humans | Animals | Earth | Codin...   \n",
       "14    Techy. Writer at http://ezibota.com. Author of...   \n",
       "15    economist, entrepreneur, developer, mentor for...   \n",
       "16    Creative programmer, Dvorak keyboard user, alw...   \n",
       "17         Christ Centered Dev. || Developer || Blogger   \n",
       "18    Learning JavaScript, Vue.js, Sass, Python, Dja...   \n",
       "19    Software Engineer student at the Grace Hopper ...   \n",
       "20    Full-Stack Developer and Tech Education Enthus...   \n",
       "21    We create the best learning experience for Ful...   \n",
       "22    Curious about everything. Literature, Fiction,...   \n",
       "23    the Black MacGyver | @OURshow (Sat 5-7pm WPRK ...   \n",
       "24        Former CEO at Bloc. I build growth companies.   \n",
       "25             Learning to code at General Assembly WDI   \n",
       "26    Coding school for creative people & entreprene...   \n",
       "27    Co-Founder & CTO of Code Chrysalis, a coding b...   \n",
       "28                              Ironhack Expansion Lead   \n",
       "29                                                 None   \n",
       "...                                                 ...   \n",
       "1019  Providing the 21st century CS degree. We turn ...   \n",
       "1020                                               None   \n",
       "1021                                               None   \n",
       "1022  Washington, D.C.-based web developer. Former c...   \n",
       "1023  Full Stack Development Student at The Iron Yar...   \n",
       "1024                                               None   \n",
       "1025  Software engineer at @IFTTT, Alum of the Grace...   \n",
       "1026                                               None   \n",
       "1027  Software developer: Ruby (Rails), Javascript (...   \n",
       "1028        Facilitator @ Chingu. Apply here: chingu.io   \n",
       "1029  I am a PhD student studying  programming, cult...   \n",
       "1030  I make things with design and code. Here's to ...   \n",
       "1031                                  Software Engineer   \n",
       "1032  I make things with design and code. Here's to ...   \n",
       "1033  I am a software development educator and entre...   \n",
       "1034                                               None   \n",
       "1035  Cyber Security Architect https://www.linkedin....   \n",
       "1036                        // Love. Learn. Code. Blog.   \n",
       "1037                                               None   \n",
       "1038  Martial artist, instructional designer, traine...   \n",
       "1039  the Black MacGyver | @OURshow (Sat 5-7pm WPRK ...   \n",
       "1040        Facilitator @ Chingu. Apply here: chingu.io   \n",
       "1041  Full-Stack Developer and Tech Education Enthus...   \n",
       "1042                                               None   \n",
       "1043  I’ve been a developer for over a decade. From ...   \n",
       "1044                                               None   \n",
       "1045                                               None   \n",
       "1046  Coder Academy Fast-track student — https://www...   \n",
       "1047                                               None   \n",
       "1048  I’m Leibel. I’m transitioning from Talmud to T...   \n",
       "\n",
       "                                                  title  \\\n",
       "0     How I’m faking it till I make it. – Clifford A...   \n",
       "1       Fear Has No Place Here – Turing School – Medium   \n",
       "2     This boot camp organised by Fidelity Bank will...   \n",
       "3        42 Piscine Day 16 — (11) – Mike Brave – Medium   \n",
       "4     My Experience at FullStack Academy Thus Far – ...   \n",
       "5                Day 37 — Meowpurrdy – conshus – Medium   \n",
       "6                                                  None   \n",
       "7                 CS 100.2: Big O – adam tropp – Medium   \n",
       "8            On Coding Bootcamps – Adam Belton – Medium   \n",
       "9                To our supporters, – Re:Coded – Medium   \n",
       "10        The Bootcamp Bubble – Anthony Jarina – Medium   \n",
       "11     <h1>Computer jargon</h1> – Gus Kemenyfy – Medium   \n",
       "12    3 Paths (and resources) for Veterans Intereste...   \n",
       "13                           The Plan – L2Code – Medium   \n",
       "14    Why You Should Learn How To Code – Shaheedah –...   \n",
       "15           The Beginning. – Jamie Gladfelter – Medium   \n",
       "16                Hello, World! – Chris Barfod – Medium   \n",
       "17    6th Week — Vivixx Coding Bootcamp – William A....   \n",
       "18      JavaScript \"Call, Apply, Bind\" – J.Lim – Medium   \n",
       "19           Here We Go… – Shoshana Rosenfield – Medium   \n",
       "20    The one about confidence. Or the lack thereof....   \n",
       "21    How to make sure a freelance job is legit – Ke...   \n",
       "22    JavaScript Functions For Dummies (Me): Part 1 ...   \n",
       "23          Day 60 — Git Up, Git Out – conshus – Medium   \n",
       "24    In-person Coding Bootcamps are Terrible Busine...   \n",
       "25    So You Think You Can Code? General Assembly Bo...   \n",
       "26    Learning & building: Following your passion as...   \n",
       "27            Why JavaScript? – Code Chrysalis – Medium   \n",
       "28    How to boost your life in the biggest LatAm st...   \n",
       "29    Job Searching After Coding Boot Camp – Ngoc Ti...   \n",
       "...                                                 ...   \n",
       "1019  Alumni Spotlight: Jeffrey Sun Empowers Others ...   \n",
       "1020  Learn JavaScript in One Day – Taylor Edwards –...   \n",
       "1021                                               None   \n",
       "1022          A Walk in the Park – Emily Deans – Medium   \n",
       "1023                  Hello, World! – Sam Kane – Medium   \n",
       "1024                                               None   \n",
       "1025  Becoming a software engineer at Grace Hopper A...   \n",
       "1026  Can a 10–12 Week Coding Bootcamp Turn You Into...   \n",
       "1027  Craft Academy: One Month of Bootcamp – Craft A...   \n",
       "1028  Overheard in Chingu (Voyage launch remix) – Ch...   \n",
       "1029  Coding Bootcamps: Women Overcoming Intimidatio...   \n",
       "1030      42 Piscine Day 8 — (05) – Mike Brave – Medium   \n",
       "1031  How Fullstack Academy Prepared Me To Be a Soft...   \n",
       "1032  42 Piscine Day 20 — (EvalExpr) – Mike Brave – ...   \n",
       "1033        Why ReactJS – Redwood Code Academy – Medium   \n",
       "1034                                               None   \n",
       "1035  The Beautiful Struggle – Haseeb Chaudhary – Me...   \n",
       "1036  Internet != Google || Facebook || Instagram – ...   \n",
       "1037                                               None   \n",
       "1038  The joy of learning JavaScript – Dan Byler – M...   \n",
       "1039         Day 45 - I'm so excited – conshus – Medium   \n",
       "1040  Chingu Weekly Vol. 60 — VOYAGE-5 IS UPON US! –...   \n",
       "1041             Failing forward. – HollsMarie – Medium   \n",
       "1042  LearnFactory Internship: Day 10 – LearnFactory...   \n",
       "1043  Anthony Delgado Interview in San Juan, Puerto ...   \n",
       "1044  LearnFactory Internship: Day 9 – LearnFactory ...   \n",
       "1045      Day One — First Review – Jacob Moore – Medium   \n",
       "1046  Extracting hash values from user input – Caleb...   \n",
       "1047  비전공자와 코딩 1 | 누구나 처음에는 비전공자였다. – Code States – ...   \n",
       "1048  Weather Mood Booster App. Yay! I made an app 🤓...   \n",
       "\n",
       "                          date publisher  \\\n",
       "0     2018-08-31T01:43:41.476Z    medium   \n",
       "1     2017-02-03T13:47:00.584Z    medium   \n",
       "2     2018-04-03T04:12:09.677Z    medium   \n",
       "3     2018-09-05T05:02:51.228Z    medium   \n",
       "4     2017-07-28T02:40:51.876Z    medium   \n",
       "5     2017-05-02T12:09:22.962Z    medium   \n",
       "6                         None      None   \n",
       "7     2018-05-16T21:38:09.304Z    medium   \n",
       "8     2018-05-27T10:28:22.105Z    medium   \n",
       "9     2018-03-02T08:00:00.000Z    medium   \n",
       "10    2017-07-20T18:10:32.432Z    medium   \n",
       "11    2018-08-07T03:29:50.147Z    medium   \n",
       "12    2017-02-02T21:37:45.437Z    medium   \n",
       "13    2018-03-04T00:12:47.996Z    medium   \n",
       "14    2018-05-08T10:08:05.256Z    medium   \n",
       "15    2017-10-02T22:12:10.995Z    medium   \n",
       "16    2018-03-07T05:47:01.018Z    medium   \n",
       "17    2017-07-21T14:50:30.933Z    medium   \n",
       "18    2018-05-23T16:49:14.572Z    medium   \n",
       "19    2018-05-27T19:29:40.767Z    medium   \n",
       "20    2018-03-21T03:46:05.315Z    medium   \n",
       "21    2017-06-08T15:12:45.179Z    medium   \n",
       "22    2018-04-01T10:56:50.624Z    medium   \n",
       "23    2017-06-05T13:43:03.571Z    medium   \n",
       "24    2017-07-13T08:14:10.466Z    medium   \n",
       "25    2017-12-04T03:07:13.474Z    medium   \n",
       "26    2018-09-05T16:41:35.031Z    medium   \n",
       "27    2017-06-02T22:52:18.379Z    medium   \n",
       "28    2018-05-22T12:08:34.136Z    medium   \n",
       "29    2018-03-16T09:57:28.426Z    medium   \n",
       "...                        ...       ...   \n",
       "1019  2018-08-30T12:51:01.184Z    medium   \n",
       "1020  2018-04-06T17:14:58.391Z    medium   \n",
       "1021                      None      None   \n",
       "1022  2017-08-09T21:41:00.990Z    medium   \n",
       "1023  2017-07-10T19:35:11.988Z    medium   \n",
       "1024                      None      None   \n",
       "1025  2017-01-05T21:32:56.358Z    medium   \n",
       "1026  2018-08-11T21:40:33.576Z    medium   \n",
       "1027  2016-09-01T15:54:28.778Z    medium   \n",
       "1028  2017-07-24T12:17:38.930Z    medium   \n",
       "1029  2018-08-11T00:20:38.208Z    medium   \n",
       "1030  2018-08-28T07:57:39.091Z    medium   \n",
       "1031  2018-08-11T20:23:18.342Z    medium   \n",
       "1032  2018-09-09T02:22:45.751Z    medium   \n",
       "1033  2018-05-30T21:14:26.023Z    medium   \n",
       "1034                      None      None   \n",
       "1035  2018-07-08T08:42:33.881Z    medium   \n",
       "1036  2018-05-16T18:04:46.255Z    medium   \n",
       "1037                      None      None   \n",
       "1038  2018-03-01T19:03:13.942Z    medium   \n",
       "1039  2017-05-12T11:30:06.801Z    medium   \n",
       "1040  2018-05-28T18:20:02.021Z    medium   \n",
       "1041  2018-03-05T04:59:50.275Z    medium   \n",
       "1042  2018-05-12T04:59:22.824Z    medium   \n",
       "1043  2018-07-02T04:15:46.421Z    medium   \n",
       "1044  2018-05-12T04:08:50.081Z    medium   \n",
       "1045  2017-07-17T16:49:44.442Z    medium   \n",
       "1046  2017-08-03T09:24:13.241Z    medium   \n",
       "1047  2018-05-21T03:38:17.827Z    medium   \n",
       "1048  2017-06-04T22:12:18.327Z    medium   \n",
       "\n",
       "                                                   text  \n",
       "0     How I’m faking it till I make it.One of the co...  \n",
       "1     Fear Has No Place Hereby Jeff CasimirWe’re les...  \n",
       "2     This boot camp organised by Fidelity Bank will...  \n",
       "3     42 Piscine Day 16 — (11)Edit: This is part of ...  \n",
       "4     My Experience at FullStack Academy Thus FarAs ...  \n",
       "5     Day 37 — Meowpurrdyliner notes:So yesterday, w...  \n",
       "6                                                  None  \n",
       "7     CS 100.2: Big OOkay, so I know I said that in ...  \n",
       "8     On Coding BootcampsDuring the three months bet...  \n",
       "9     To our supporters,Last week marked the graduat...  \n",
       "10    The Bootcamp BubbleWith news that DevBootcamp ...  \n",
       "11    <h1>Computer jargon</h1>Week 2 of my coding jo...  \n",
       "12    3 Paths (and Resources) for Veterans Intereste...  \n",
       "13    The PlanOnward and Upward!Photo by SpaceXThe m...  \n",
       "14    Why You Should Learn How To Code1. Schedule Fr...  \n",
       "15    The Beginning.With the building purchase compl...  \n",
       "16    Hello, World!Come with me on a journey through...  \n",
       "17    6th Week — Vivixx Coding BootcampVivixx Academ...  \n",
       "18    JavaScript “Call, Apply, Bind”JL’s Coding Boot...  \n",
       "19    Here We Go…I told myself that I could never bl...  \n",
       "20    The one about confidence. Or the lack thereof....  \n",
       "21    How to make sure a freelance job is legitThink...  \n",
       "22    JavaScript Functions For Dummies (Me): Part 1D...  \n",
       "23    Day 60 — Git Up, Git Outliner notes:Friday…we ...  \n",
       "24    In-person Coding Bootcamps are Terrible Busine...  \n",
       "25    So You Think You Can Code? General Assembly Bo...  \n",
       "26    Learning & building: Following your passion as...  \n",
       "27    Why JavaScript?“any application that can be wr...  \n",
       "28    How to boost your life in the biggest LatAm st...  \n",
       "29    Job Searching After Coding Boot CampFinding a ...  \n",
       "...                                                 ...  \n",
       "1019  Alumni Spotlight: Jeffrey Sun Empowers Others ...  \n",
       "1020  Learn JavaScript in One DayLet’s be real. Codi...  \n",
       "1021                                               None  \n",
       "1022  A Walk in the ParkWe took a little detour from...  \n",
       "1023  Hello, World!My Path to a Coding BootcampTwelv...  \n",
       "1024                                               None  \n",
       "1025  Becoming a software engineer at Grace Hopper A...  \n",
       "1026  Can a 10–12 Week Coding Bootcamp Turn You Into...  \n",
       "1027  Craft Academy: One Month of BootcampLots of pe...  \n",
       "1028  Overheard in Chingu (Voyage launch remix)Rando...  \n",
       "1029  Coding Bootcamps: Women Overcoming Intimidatio...  \n",
       "1030  42 Piscine Day 8 — (05)Edit: This is part of a...  \n",
       "1031  How Fullstack Academy Prepared Me To Be a Soft...  \n",
       "1032  42 Piscine Day 20 — (EvalExpr)Edit: This is pa...  \n",
       "1033  Why ReactJS“Close-up of a laptop screen with l...  \n",
       "1034                                               None  \n",
       "1035  The Beautiful StruggleIt’s been four months si...  \n",
       "1036  Internet != Google || Facebook || InstagramJus...  \n",
       "1037                                               None  \n",
       "1038  The joy of learning JavaScriptLearning how to ...  \n",
       "1039  Day 45 - I'm so excitedliner notes:Yesterday w...  \n",
       "1040  Chingu Weekly Vol. 60 — VOYAGE-5 IS UPON US!An...  \n",
       "1041  Failing forward.First things first. I earned a...  \n",
       "1042  LearnFactory Internship: Day 10“Without ambiti...  \n",
       "1043  Anthony Delgado Interview in San Juan, Puerto ...  \n",
       "1044  LearnFactory Internship: Day 9Live to be satis...  \n",
       "1045  Day One — First ReviewSo far the most we have ...  \n",
       "1046  Extracting hash values from user inputJust thr...  \n",
       "1047  비전공자와 코딩 1 | 누구나 처음에는 비전공자였다.비전공자도 할 수 있을까요?코딩...  \n",
       "1048  Weather Mood Booster App. Yay! I made an app 🤓...  \n",
       "\n",
       "[1049 rows x 6 columns]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Codingbootcamp_info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "none_urls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (<ipython-input-99-5a9e8c99c1ac>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-99-5a9e8c99c1ac>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    print(\"hello\")\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "%timeit for i in range(4):\n",
    "            print(\"hello\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
